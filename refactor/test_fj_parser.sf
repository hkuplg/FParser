{-#
    INCLUDE "fj_parser.sf"
    INCLUDE "testfx.sf"
    INCLUDE "test_parser_helpers.sf"
#-}

let testFJExprVariable : TestFn = {
    name = "Test Varialbe a",
    fn   = \(__ : Unit) -> {
        assertParseStringResult[FJExpr]
            fjExprEq
            fjExprToString
            (FJVariable "a")
            fjExpr
            "a"
    }
};

let testFJFieldAccess : TestFn = {
    name = "Test Field Access",
    fn   = \(__ : Unit) -> {
        assertParseStringResult[FJExpr]
            fjExprEq
            fjExprToString
            (FJFieldAccess (FJVariable "a") "b")
            fjExpr
            "a.b"
    }
};

let testFJMethodInvoke : TestFn = {
    name = "Test Method Invoke",
    fn   = \(__ : Unit) ->
        assertParseStringResult[FJExpr]
            fjExprEq
            fjExprToString
            (FJMethodInvoke (FJVariable "a") "b" (Nil[FJExpr]))
            fjExpr
            "a.b()"
};

let testFJAllocate : TestFn = {
    name = "Test FJ Allocate",
    fn   = \(__ : Unit) -> {
        assertParseStringResult[FJExpr]
            fjExprEq
            fjExprToString
            (FJAllocate (FJType "A") (Nil[FJExpr]))
            fjExpr
            "new A()"
    }
};

let testFJTypeCast : TestFn = {
    name = "Test FJ TypeCast",
    fn   = \(__ : Unit) -> {
        assertParseStringResult[FJExpr]
            fjExprEq
            fjExprToString
            (FJTypeCast (FJType "A") (FJVariable "a"))
            fjExpr
            "(A) a"
    }
};

let testFJIntLiteral : TestFn = {
    name = "Test FJ Int Literal",
    fn   = \(__ : Unit) -> {
        assertParseStringResult[FJExpr]
            fjExprEq
            fjExprToString
            (FJIntLiteral "42")
            fjExpr
            "42"
    }
};

let testFJBracketSurroundedExpr : TestFn = {
    name = "Test FJBracketSurroundedExpr",
    fn   = \(__ : Unit) ->
        assertParseStringResult[FJExpr]
            fjExprEq
            fjExprToString
            (FJBracketSurroundedExpr (FJIntLiteral "42"))
            fjExpr
            "(42)"
};

let testFJVariableDef : TestFn = {
    name = "Test FJVariableDef",
    fn   = \(__ : Unit) -> {
        let vars =
            ("a", (Nothing[FJExpr]))
                +>[(FJIdentifier, Maybe[FJExpr])] (("b", (Just[FJExpr] (FJIntLiteral "1")))
                +>[(FJIdentifier, Maybe[FJExpr])] (Nil[(FJIdentifier, Maybe[FJExpr])]));

        assertParseStringResult[FJVariableDef]
            fjVariableDefEq
            fjVariableDefToString
            (FJVariableDef (FJType "int") vars)
            fjVariableDef
            "int a, b = 1;"
    }
};

let testFJFieldDef : TestFn = {
    name = "Test FJFieldDef",
    fn   = \(__ : Unit) -> {
        let vars =
            ("a", (Nothing[FJExpr]))
                +>[(FJIdentifier, Maybe[FJExpr])] (("b", (Just[FJExpr] (FJIntLiteral "1")))
                +>[(FJIdentifier, Maybe[FJExpr])] (Nil[(FJIdentifier, Maybe[FJExpr])]));

        assertParseStringResult[FJFieldDef]
            fjFieldDefEq
            fjFieldDefToString
            (FJFieldDef (FJType "int") vars)
            fjFieldDef
            "int a, b = 1;"
    }
};

let testFJParserSuite : TestSuite = {
    name = "Test Feather Weight Java parser",
    fns  = testFJExprVariable
                +>[TestFn] (testFJFieldAccess
                +>[TestFn] (testFJMethodInvoke
                +>[TestFn] (testFJAllocate
                +>[TestFn] (testFJTypeCast
                +>[TestFn] (testFJIntLiteral
                +>[TestFn] (testFJBracketSurroundedExpr
                +>[TestFn] (testFJVariableDef
                +>[TestFn] (testFJFieldDef
                +>[TestFn] (Nil[TestFn])))))))))
};
