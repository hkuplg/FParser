{-# INCLUDE "parser.sf" #-}

-- Simple arithmetic expression

{-
    -- Left recursion
    expr ::= term | expr + term | expr - term
    term ::= factor | term * factor | term / factor
    factor ::= number | ( expr )

    -- fixed
    expr ::= term expr'
    expr' ::= e | + term expr' | - term expr'
    term ::= factor term'
    term' ::= e | * factor term' | / factor term'
    factor ::= number | ( expr )
-}

data ArithExpr = Add ArithExpr ArithExpr
               | Sub ArithExpr ArithExpr
               | Mul ArithExpr ArithExpr
               | Div ArithExpr ArithExpr
               | Integer Int
               ;

let rec arithExprToString (e : ArithExpr) : String =
    case e of
        Add e1 e2 -> "Add(\{arithExprToString e1}, \{arithExprToString e2})"
     |  Sub e1 e2 -> "Sub(\{arithExprToString e1}, \{arithExprToString e2})"
     |  Mul e1 e2 -> "Mul(\{arithExprToString e1}, \{arithExprToString e2})"
     |  Div e1 e2 -> "Div(\{arithExprToString e1}, \{arithExprToString e2})"
     |  Integer i -> "Integer(\{intToString i})"
     ;

let rec arithExprEq (a : ArithExpr) (b : ArithExpr) : Bool =
    case a of
        Add ae1 ae2 -> {
            case b of
                Add be1 be2 -> (arithExprEq ae1 be1) && (arithExprEq ae2 be2)
             |  _ -> False
        }
     |  Sub ae1 ae2 -> {
            case b of
                Sub be1 be2 -> (arithExprEq ae1 be1) && (arithExprEq ae2 be2)
             |  _ -> False
        }
     |  Mul ae1 ae2 -> {
            case b of
                Mul be1 be2 -> (arithExprEq ae1 be1) && (arithExprEq ae2 be2)
             |  _ -> False
        }
     |  Div ae1 ae2 -> {
            case b of
                Div be1 be2 -> (arithExprEq ae1 be1) && (arithExprEq ae2 be2)
             |  _ -> False
        }
     |  Integer ai -> {
            case b of
                Integer bi -> (ai == bi)
             |  _ -> False
        }
     ;

let arithExprSpace : Parser[Unit] =
    many[Char] space $>[PList[Char], Unit] ();

let arithExprBracketSurrounded[E] (p : Parser[E]) : Parser[E] =
    between[Char, Char, E]
        ((char '(') <*[Char, Unit] arithExprSpace)
        ((char ')') <*[Char, Unit] arithExprSpace)
        p;

let arithExprAddSub : Parser[ArithExpr -> ArithExpr -> ArithExpr] =
    let addop (a : ArithExpr) (b : ArithExpr) = Add a b;
    let subop (a : ArithExpr) (b : ArithExpr) = Sub a b;

    let add = (char '+') $>[Char, ArithExpr -> ArithExpr -> ArithExpr] addop;
    let sub = (char '-') $>[Char, ArithExpr -> ArithExpr -> ArithExpr] subop;

    add `choice[ArithExpr -> ArithExpr -> ArithExpr]` sub;

let arithExprMulDiv : Parser[ArithExpr -> ArithExpr -> ArithExpr] =
    let mulop (a : ArithExpr) (b : ArithExpr) = Mul a b;
    let divop (a : ArithExpr) (b : ArithExpr) = Div a b;

    let mul = (char '*') $>[Char, ArithExpr -> ArithExpr -> ArithExpr] mulop;
    let div = (char '/') $>[Char, ArithExpr -> ArithExpr -> ArithExpr] divop;

    mul `choice[ArithExpr -> ArithExpr -> ArithExpr]` div;

let arithExprInteger : Parser[ArithExpr] =
    (((char '-') <*[Char, Unit] arithExprSpace)
        >>[Char, ArithExpr] (natural <$>[Int, ArithExpr] (\(i : Int) -> Integer (0 - i))))
    (((char '+') <*[Char, Unit] arithExprSpace)
        >>[Char, ArithExpr] (natural <$>[Int, ArithExpr] (\(i : Int) -> Integer i)))
    <|>[ArithExpr]
    (natural <$>[Int, ArithExpr] (\(i : Int) -> Integer i));

let rec arithExpr : Parser[ArithExpr] =
    \(s : ParseInput) ->
        chainl1[ArithExpr]
            (arithExprTerm <*[ArithExpr, Unit] arithExprSpace)
            (arithExprAddSub <*[ArithExpr -> ArithExpr -> ArithExpr, Unit] arithExprSpace)
            s
and arithExprFactor : Parser[ArithExpr] =
    \(s : ParseInput) ->
        choice[ArithExpr]
            (arithExprInteger <*[ArithExpr, Unit] arithExprSpace)
            ((arithExprBracketSurrounded[ArithExpr] arithExpr) <*[ArithExpr, Unit] arithExprSpace)
            s
and arithExprTerm : Parser[ArithExpr] =
    \(s : ParseInput) ->
        chainl1[ArithExpr]
            (arithExprFactor <*[ArithExpr, Unit] arithExprSpace)
            (arithExprMulDiv <*[ArithExpr -> ArithExpr -> ArithExpr, Unit] arithExprSpace)
            s;

let rec arithExprEval (e : ArithExpr) : Int =
    case e of
        Integer i -> i
     |  Add e1 e2 -> (arithExprEval e1) + (arithExprEval e2)
     |  Sub e1 e2 -> (arithExprEval e1) - (arithExprEval e2)
     |  Mul e1 e2 -> (arithExprEval e1) * (arithExprEval e2)
     |  Div e1 e2 -> (arithExprEval e1) / (arithExprEval e2)
     ;
