
-- Definition of Thunk
type Thunk[A] = Unit -> A;

let eval[A] (t : Thunk[A]) : A =
    t ();

-- Maybe definition

data Maybe[A] = Nothing
              | Just A
              ;

-- Result definition
data Result[S, E] = Ok S
                  | Err E
                  ;

-- State definition
type State[S, A] = S -> (A, S);

-- ADT List
data PList[A] = Nil
              | Cons A (Thunk[PList[A]])
              ;

let rec nats (beg : Int) : PList[Int] =
    Cons[Int] beg (\(__ : Unit) -> nats (beg+1));

-- Utilities

let singleton[A] (x : A) : PList[A] =
    Cons[A] x (\(__: Unit) -> (Nil[A]));

let rec map[A, B] (f : A -> B) (l : PList[A]) : PList[B] =
    case l of
        Nil             ->      Nil[B]
     |  Cons x xs       ->      Cons[B] (f x) (\(__ : Unit) -> (map[A, B] f (eval[PList[A]] xs)));

let rec foldl[A, B] (f : B -> A -> B) (z : B) (l : PList[A]) : B =
    case l of
        Nil             ->      z
     |  Cons x xs       ->      foldl[A, B] f (f z x) (eval[PList[A]] xs);

--let rec foldr[A, B] (f : A -> B -> B) (z : B) (l : PList[A]) : B =
--    case l of
--        Nil             ->      z
--     |  Cons x xs       ->      f x (foldr[A, B] f z (eval[PList[A]] xs));

let foldr[A, B] (f : A -> B -> B) (z : B) (l : PList[A]) : B =
    (let rec inner (s : PList[A]) (k : B -> B) : B =
        case s of
            Nil         -> k z
         |  Cons x xs   -> inner (eval[PList[A]] xs) (\(y : B) -> k (f x y));
     inner l (\(x : B) -> x));


let join[A] (l : PList[A]) (j : A) : PList[A] = {
    let rec inner[A] (l : PList[A]) (j : A) : PList[A] =
        case l of
            Nil         -> (Nil[A])
         |  Cons x xs   -> (Cons[A] j (\(__ : Unit) ->
                                (Cons[A] x (\(__ : Unit) -> inner[A] (eval[PList[A]] xs) j))));
    case l of
        Nil         -> (Nil[A])
     |  Cons x xs   -> (Cons[A] x (\(__ : Unit) -> inner[A] (eval[PList[A]] xs) j))
};

let (+>)[A] (a : A) (l : PList[A]) : PList[A] =
    Cons[A] a (\(__ : Unit) -> l);

let rec concat2[A] (a : PList[A]) (b : PList[A]) : PList[A] =
    case a of
        Nil         ->  b
      | Cons x xs   ->  Cons[A] x (\(__ : Unit) -> (concat2[A] (eval[PList[A]] xs) b));

let (@)[A] (a : PList[A]) (b : PList[A]) : PList[A] =
    concat2[A] a b;

let rec concat[A] (l : PList[PList[A]]) : PList[A] =
    case l of
        Nil         ->  Nil[A]
     |  Cons x xs   ->  concat2[A] x (concat[A] (eval[PList[PList[A]]] xs));

let rec len[A] (l : PList[A]) : Int =
    case l of
        Nil         ->  0
     |  Cons _ xs   ->  1 + (len[A] (eval[PList[A]] xs));

let isempty[A] (l : PList[A]) : Bool =
    case l of
        Nil         -> True
     |  Cons _ _    -> False;

let first[A] (l : PList[A]) : Maybe[A] =
    case l of
        Nil         -> Nothing[A]
     |  Cons x _    -> Just[A] x;

let rest[A] (l : PList[A]) : Maybe[PList[A]] =
    case l of
        Nil         -> Nothing[PList[A]]
     |  Cons _ xs   -> Just[PList[A]] (eval[PList[A]] xs);

let rec take[A] (n : Int) (l : PList[A]) : PList[A] =
    if n <= 0 then
        (Nil[A])
    else
        case l of
            Nil         ->  Nil[A]
         |  Cons x xs   ->  Cons[A] x (\(__ : Unit) -> (take[A] (n-1) (eval[PList[A]] xs)));

let listToString[A] (l : PList[A]) (tostr : A -> String) : String =
    (let inner = foldl[String, String] (\(b : String) (a : String) -> b.concat(a))
                                       ""
                                       (join[String] (map[A, String] tostr l) ", ");
     "[".concat(inner).concat("]"));

-- ADT String

type PString = PList[Char];

let toString (l : PString) : String =
    foldl[Char, String] (\(b : String) (a : Char) -> b.concat(a.toString())) "" l;

let rec fromString (str : String) : PString =
    if length(str) == 0 then
        (Nil[Char])
    else
        (Cons[Char] str.charAt(0) (\(__ : Unit) -> (fromString str.substring(1))));

let rec charin (c : Char) (str : PString) : Bool =
    case str of
        Nil         ->      False
     |  Cons x xs   ->      if x == c then True else (charin c (eval[PString] xs));

-- Parser type definition

type Parser[A] = PString -> PList[(A, PString)];

-- Primitive Parsers

let result[V] (value : V) : Parser[V] =
    \(inp : PString) -> singleton[(V, PString)] (value, inp);

let zero[V] : Parser[V] =
    \(inp : PString) -> Nil[(V, PString)];

let item : Parser[Char] =
    \(inp : PString) ->
        case inp of
            Nil         ->      Nil[(Char, PString)]
          | Cons c xs   ->      singleton[(Char, PString)] (c, (eval[PString] xs));

-- Combinators

let bind[A, B] (p : Parser[A]) (f : A -> Parser[B]) : Parser[B] =
    \(inp : PString) ->
        concat[(B, PString)]
              (map[(A, PString), PList[(B, PString)]]
                  (\(v : (A, PString)) -> f v._1 v._2) (p inp));

let (>>=)[A, B] (p : Parser[A]) (f : A -> Parser[B]) : Parser[B] =
    bind[A, B] p f;

let (>>)[A, B] (p : Parser[A]) (q : Parser[B]) : Parser[B] =
    p >>=[A, B] (\(__ : A) -> q);

let (<*)[A, B] (p : Parser[A]) (q : Parser[B]) : Parser[A] =
    p >>=[A, A] (\(a : A) ->
    q >>=[B, A] (\(__ : B) ->
    result[A] a));

let (*>)[A, B] (p : Parser[A]) (q : Parser[B]) : Parser[B] =
    p >>=[A, B] (\(__ : A) ->
    q >>=[B, B] (\(b : B) ->
    result[B] b));

let using[A, B] (p : Parser[A]) (f : A -> B) : Parser[B] =
    bind[A, B] p (\(a : A) -> result[B] (f a));

let (<$>)[A, B] (p : Parser[A]) (f : A -> B) : Parser[B] =
    using[A, B] p f;

let seq[A, B] (p : Parser[A]) (q : Parser[B]) : Parser[(A, B)] =
    bind[A, (A, B)] p (\(x : A) ->
    bind[B, (A, B)] q (\(y : B) ->
    result[(A, B)] (x, y)));

let choice[A] (p : Parser[A]) (q : Parser[A]) : Parser[A] =
    \(inp : PString) ->
        (p inp) @[(A, PString)] (q inp);

let (<|>)[A] (p : Parser[A]) (q : Parser[A]) : Parser[A] =
    choice[A] p q;

let sat (f : Char -> Bool) : Parser[Char] =
    bind[Char, Char] item (\(x : Char) -> if f x then (result[Char] x) else zero[Char]);

let char (x : Char) : Parser[Char] =
    sat (\(y : Char) -> x == y);

let notchar (x : Char) : Parser[Char] =
    sat (\(y : Char) -> x != y);

let digit : Parser[Char] =
    sat (\(x : Char) -> java.lang.Character.isDigit(x));

let upper : Parser[Char] =
    sat (\(x : Char) -> java.lang.Character.isUpperCase(x));

let lower : Parser[Char] =
    sat (\(x : Char) -> java.lang.Character.isLowerCase(x));

let space : Parser[Char] =
    sat (\(x : Char) -> java.lang.Character.isSpaceChar(x));

let whitespace : Parser[Char] =
    sat (\(x : Char) -> java.lang.Character.isWhitespace(x));

let letter : Parser[Char] =
    choice[Char] lower upper;

let alphanum : Parser[Char] =
    choice[Char] letter digit;

let noneof (s : PString) : Parser[Char] =
    sat (\(x : Char)  -> (charin x s) == False);

let rec string (s : PString) : Parser[PString] =
    case s of
        Nil         ->  result (Nil[Char])
     |  Cons x xs   ->
            (let xs = eval[PString] xs;
             bind[Char, PString]    (char x)    (\(dummy1 : Char) ->
             bind[PString, PString] (string xs) (\(dummy2 : PString) ->
             result[PString] (Cons[Char] x (\(__ : Unit) -> xs)))));

-- Repetition

let rec many[A] (p : Parser[A]) : Parser[PList[A]] =
    choice[PList[A]] (bind[A, PList[A]] p (\(x : A) ->
                      bind[PList[A], PList[A]] (many[A] p) (\(xs : PList[A]) ->
                      result[PList[A]] (Cons[A] x (\(__ : Unit) -> xs)))))
                     (result[PList[A]] (Nil[A]));

let many1[A] (p : Parser[A]) : Parser[PList[A]] =
    bind[A, PList[A]] p (\(x : A) ->
    bind[PList[A], PList[A]] (many[A] p) (\(xs : PList[A]) ->
    result[PList[A]] (Cons[A] x (\(__ : Unit) -> xs))));

let word : Parser[PString] =
    many1[Char] letter;

let ident : Parser[PString] =
    bind[Char, PString] lower (\(x : Char) ->
    bind[PString, PString] (many[Char] alphanum) (\(xs : PString) ->
    result[PString] (Cons[Char] x (\(__ : Unit) -> xs))));

let natural : Parser[Int] = {
    let evaluate (xs : PList[Char]) =
        foldl[Int, Int] (\(b : Int) (a : Int) -> 10 * b + a)
                        0
                        (map[Char, Int] (\(c : Char) -> java.lang.Character.digit(c, 10)) xs);

    bind[PList[Char], Int] (many1[Char] digit) (\(xs : PList[Char]) -> result[Int] (evaluate xs))
};

let int : Parser[Int] =
    choice[Int] ((char '-') >>[Char, Int]
                 (using[Int,Int] natural (\(n : Int) -> (-n))))
              natural;

-- Repetition with seperators

let sepby1[A, B] (p : Parser[A]) (sep : Parser[B]) : Parser[PList[A]] = {
    let rep[A, B] (p : Parser[A]) : Parser[A] =
        bind[B, A] sep (\(s : B) -> bind[A, A] p (\(y : A) -> result[A] y));
    bind[A, PList[A]] p (\(x : A) ->
    bind[PList[A], PList[A]] (many[A] (rep[A, B] p)) (\(xs : PList[A]) ->
    result[PList[A]] (Cons[A] x (\(__ : Unit) -> xs))))
};

let sepby[A, B] (p : Parser[A]) (sep : Parser[B]) : Parser[PList[A]] =
    choice[PList[A]] (sepby1[A, B] p sep) (result[PList[A]] (Nil[A]));


-- More complicated

-- Parses non-empty sequences of items seperated by operators that associate to the left
let chainl1[A] (p : Parser[A]) (op : Parser[A -> A -> A]) : Parser[A] = {
    let fy =
        bind[A -> A -> A, (A -> A -> A, A)] op (\(f : A -> A -> A) ->
        bind[A, (A -> A -> A, A)]           p  (\(y : A) ->
        result[(A -> A -> A, A)] (f, y)));

    bind[A, A]                           p                            (\(x : A) ->
    bind[PList[(A -> A -> A, A)], A]     (many[(A -> A -> A, A)] fy)  (\(fys: PList[(A -> A -> A, A)]) ->
    result[A] (foldl[(A -> A -> A, A), A] (\(x : A) (fy : (A -> A -> A, A)) -> fy._1 x fy._2) x fys)))
};

-- associate to the right
let rec chainr1[A] (p : Parser[A]) (op : Parser[A -> A -> A]) : Parser[A] =
    bind[A, A] p (\(x : A) ->
        choice[A] (bind[A -> A -> A, A] op (\(f : A -> A -> A) ->
                 bind[A, A] (chainr1[A] p op) (\(y : A) -> -- Calculate the result on the right
                 result[A] (f x y))))
                (result[A] x));

let chainl[A] (p : Parser[A]) (op : Parser[A -> A -> A]) (v : A) : Parser[A] =
    choice[A] (chainl1[A] p op) (result[A] v);

let chainr[A] (p : Parser[A]) (op : Parser[A -> A -> A]) (v : A) : Parser[A] =
    choice[A] (chainr1[A] p op) (result[A] v);


-- Improved Laziness (Haven't supported in F2J yet)

-- Pick the first (if exists) result
--let only[A] (p : Parser[A]) : Parser[A] =
--    \(inp : PString) ->
--        case (p inp) of
--            Nil         -> (Nil[(A, PString)])
--         |  Cons x xs   -> (singleton[(A, PString)] x);

let only[A] (p : Parser[A]) : Parser[A] =
    \(inp : PString) -> take[(A, PString)] 1 (p inp);

-- Lazy choice
let lazychoice[A] (p : Parser[A]) (q : Parser[A]) : Parser[A] =
    only[A] (choice[A] p q);

-- Simple arithmetic expression

let bracket[A, B, C] (open : Parser[A]) (p : Parser[B]) (close : Parser[C]) : Parser[B] =
    open >>[A, B] p >>=[B, B] (\(x : B) -> close >>[C, B] (result[B] x));

let operation = {
    let addop (a : Int) (b : Int) : Int = a + b;
    let subop (a : Int) (b : Int) : Int = a - b;
    let mulop (a : Int) (b : Int) : Int = a * b;
    let divop (a : Int) (b : Int) : Int = a / b;

    let add = (char '+') >>[Char, Int -> Int -> Int] (result[Int -> Int -> Int] addop);
    let sub = (char '-') >>[Char, Int -> Int -> Int] (result[Int -> Int -> Int] subop);
    let mul = (char '*') >>[Char, Int -> Int -> Int] (result[Int -> Int -> Int] mulop);
    let div = (char '/') >>[Char, Int -> Int -> Int] (result[Int -> Int -> Int] divop);

    add `choice[Int -> Int -> Int]` sub `choice[Int -> Int -> Int]` mul `choice[Int -> Int -> Int]` div
};

let rec expr : Parser[Int] =
    \(s : PString) -> chainl1[Int] factor operation s
and factor : Parser[Int] =
    \(s : PString) -> choice[Int] natural (bracket[Char, Int, Char] (char '(') expr (char ')')) s;

-- Naive XML Parser

data XMLNode = XMLText      PString
             | XMLAttr      (PString, PString)
             | XMLElement   PString PList[XMLNode] PList[XMLNode]
             | XMLCData     PString
             | XMLComment   PString
             ;

let xmlComment : Parser[PList[Char]] =
    bind[PString, PList[Char]]     (string (fromString "<!--")) (\(cstart : PString) ->
    bind[PList[Char], PList[Char]] (many[Char] item) (\(comment : PList[Char]) ->
    bind[PString, PList[Char]]     (string (fromString "-->")) (\(cend : PString) ->
    result[PList[Char]] comment)));

--let xmlSpace : Parser[Unit] =
--    only[Unit]
--        (bind[PList[Char], Unit] (many[Char] whitespace) (\(sp1 : PList[Char]) ->
--         bind[PList[Char], Unit] xmlComment              (\(cmt : PList[Char]) ->
--         bind[PList[Char], Unit] (many[Char] whitespace) (\(sp2 : PList[Char]) ->
--         result[Unit] ()))));
let xmlSpace : Parser[Unit] =
    only[Unit]
        (choice[Unit]
            (bind[PList[Char], Unit] (many[Char] whitespace) (\(__ : PList[Char]) -> result[Unit] ()))
            (bind[PList[Char], Unit] (many[Char] whitespace) (\(sp1 : PList[Char]) ->
             bind[PList[Char], Unit] xmlComment              (\(cmt : PList[Char]) ->
             bind[PList[Char], Unit] (many[Char] whitespace) (\(sp2 : PList[Char]) ->
             result[Unit] ())))));

-- Normal version
let xmlEscapedChar : Parser[Char] = {
    let quot = bind[PString, Char] (string (fromString "&quot;")) (\(__ : PString) -> result[Char] '"');
    let apos = bind[PString, Char] (string (fromString "&apos;")) (\(__ : PString) -> result[Char] '\'');
    let lt = bind[PString, Char] (string (fromString "&lt;")) (\(__ : PString) -> result[Char] '<');
    let gt = bind[PString, Char] (string (fromString "&gt;")) (\(__ : PString) -> result[Char] '>');
    let amp = bind[PString, Char] (string (fromString "&amp;")) (\(__ : PString) -> result[Char] '&');

    quot `choice[Char]` apos `choice[Char]` lt `choice[Char]` gt `choice[Char]` amp
};

let xmlChar : Parser[Char] =
    xmlEscapedChar <|>[Char] (noneof (fromString "\"'<>&"));

let xmlString : Parser[PString] =
    many[Char] xmlChar;

let xmlDoubleQuotedString : Parser[PString] =
    (char '"') *>[Char, PString] xmlString <*[PString, Char] (char '"');

let xmlSingleQuotedString : Parser[PString] =
    (char '\'') *>[Char, PString] xmlString <*[PString, Char] (char '\'');

let xmlQuotedString : Parser[PString] =
    choice[PString] xmlDoubleQuotedString xmlSingleQuotedString;

let xmlText : Parser[XMLNode] =
    xmlString <$>[PString, XMLNode] (\(content : PString) -> XMLText content);

let xmlKey : Parser[PString] =
    word;

let xmlAttr : Parser[XMLNode] =
    bind[PString, XMLNode]  xmlKey                                                          (\(key : PString) ->
    bind[Char, XMLNode]     (xmlSpace *>[Unit, Char] (char '=') <*[Char, Unit] xmlSpace)    (\(eq : Char) ->
    bind[PString, XMLNode]  xmlQuotedString                                                 (\(val : PString) ->
    result[XMLNode] (XMLAttr (key, val)))));

let xmlAttrs : Parser[PList[XMLNode]] =
    sepby[XMLNode, Unit] xmlAttr xmlSpace;

let xmlEndTag (tag : PString) : Parser[Unit] =
    (string (fromString "</"))
        >>[PString, Unit]   xmlSpace
        >>[Unit, PString]   (string tag)
        >>[PString, Unit]   xmlSpace
        >>[Unit, Char]      (char '>')
        <$>[Char, Unit]     (\(__ : Char) -> ());

--let rec xmlElement : Parser[XMLNode] =
--    bind[Char, XMLNode]             (char '<')                                  (\(__ : Char) ->
--    bind[Unit, XMLNode]             xmlSpace                                    (\(__ : Unit) ->
--    bind[PString, XMLNode]          xmlKey                                      (\(tag : PString) ->
--    bind[Unit, XMLNode]             xmlSpace                                    (\(__ : Unit) ->
--    bind[PList[XMLNode], XMLNode]   xmlAttrs                                    (\(attrs: PList[XMLNode]) ->
--    bind[Unit, XMLNode]             xmlSpace                                    (\(__ : Unit) ->
--        (bind[Char, XMLNode]             (char '>')                             (\(__ : Char) ->
--         bind[Unit, XMLNode]             xmlSpace                               (\(__ : Unit) ->
--         bind[PList[XMLNode], XMLNode]   xmlElementChildren                     (\(ch : PList[XMLNode]) ->
--         bind[Unit, XMLNode]             xmlSpace                               (\(__ : Unit) ->
--         bind[Unit, XMLNode]             (xmlEndTag tag)                        (\(__ : Unit) ->
--         result[XMLNode] (XMLElement tag attrs ch)))))))
--
--        `choice[XMLNode]` -- ^~~ normal style  v~~ shorter style
--
--        ((string (fromString "/>")) <$>[PString, XMLNode] (\(__ : PString) -> (XMLElement tag attrs (Nil[XMLNode]))))
--    ))))))

let rec xmlElement : Parser[XMLNode] =
    (char '<') >>[Char, Unit] xmlSpace >>[Unit, PString] xmlKey >>=[PString, XMLNode] (\(tag : PString) ->
        xmlSpace >>[Unit, PList[XMLNode]] xmlAttrs >>=[PList[XMLNode], XMLNode] (\(attrs : PList[XMLNode]) ->
            -- Normal ends
            ((char '>') >>[Char, Unit] xmlSpace >>[Unit, PList[XMLNode]]
                xmlElementChildren <*[PList[XMLNode], Unit] xmlSpace <*[PList[XMLNode], Unit] (xmlEndTag tag)
                    <$>[PList[XMLNode], XMLNode] (\(ch : PList[XMLNode]) -> XMLElement tag attrs ch))

            <|>[XMLNode]

            -- Short ends
            ((string (fromString "/>"))
                >>[PString, XMLNode] (result[XMLNode] (XMLElement tag attrs (Nil[XMLNode]))))))

and xmlElementChildren : Parser[PList[XMLNode]] =
    choice[PList[XMLNode]] (xmlText `using[XMLNode, PList[XMLNode]]` (\(n : XMLNode) -> singleton[XMLNode] n))
                           (many1[XMLNode] xmlElement);

let xmlNode : Parser[XMLNode] =
    xmlElement;


-- Test

let println (s : String) : Unit = { java.lang.System.out.println(s); () };
let print (s : String) : Unit = { java.lang.System.out.print(s); () };

type TestFn = {
    name : String,
    fn   : Unit -> Unit
};

type TestSuite = {
    name : String,
    fns  : PList[TestFn]
};

let runTest (test : TestFn) : Unit = {
    let testingPrefix : String = "\u001b[31;1mtesting\u001b[0m... ";
    println testingPrefix.concat(test.name).concat(" :");
    test.fn ();
    println "\t...ok"
};

let runTests (tests : PList[TestFn]) : Unit =
    foldl[TestFn, Unit]
        (\(__ : Unit) (fn : TestFn) -> runTest fn) () tests;

let runTestSuite (suite : TestSuite) : Unit = {
    println "\n\t\u001b[32;1mRunning\u001b[37;1m ".concat(suite.name).concat("\u001b[0m ...\n");
    println "Running ".concat((len[TestFn] suite.fns).toString()).concat(" tests");
    runTests suite.fns
};

let runTestSuites (suites : PList[TestSuite]) : Unit =
    foldl[TestSuite, Unit]
        (\(__ : Unit) (suite : TestSuite) -> runTestSuite suite) () suites;

let error (msg : String) = {
    java.lang.System.err.println(msg);
    java.lang.System.exit(1);
    ()
};

-- Test helper functions

let assert (b : Bool) =
    if b then
        ()
    else
        error "assert failed!";

let rec listEqual [A] (a : PList[A]) (b : PList[A]) : Bool =
    case a of
        Nil         -> { case b of Nil -> True | Cons x xs -> False }
     |  Cons x xs   -> case b of
                            Nil          -> False
                         |  Cons xb xsb  ->
                                if x == xb then
                                    listEqual[A] (eval[PList[A]] xs) (eval[PList[A]] xsb)
                                else False;

let rec parseListEqual [A] (a : PList[(A, PString)]) (b : PList[(A, PString)]) : Bool =
    case a of
        Nil         -> { case b of Nil -> True | Cons x xs -> False }
     |  Cons x xs   -> case b of
                            Nil          -> False
                         |  Cons xb xsb  -> if x._1 == xb._1 && (listEqual[Char] x._2 xb._2) then
                                                parseListEqual[A] (eval[PList[(A, PString)]] xs)
                                                                  (eval[PList[(A, PString)]] xsb)
                                            else False;

let rec parseStringEqual (a : PList[(PString, PString)]) (b : PList[(PString, PString)]) : Bool =
    case a of
        Nil         -> { case b of Nil -> True | Cons x xs -> False }
     |  Cons x xs   -> case b of
                            Nil          -> False
                         |  Cons xb xsb  ->
                                if (listEqual[Char] x._1 xb._1) && (listEqual[Char] x._2 xb._2) then
                                    (parseStringEqual (eval[PList[(PString, PString)]] xs)
                                                      (eval[PList[(PString, PString)]] xsb))
                                else False;

let rec polyStringResultToString (r : PList[(PString, PString)]) : String =
    listToString[(PString, PString)] r
        (\(x : (PString, PString)) -> "(".concat(toString x._1).concat(", \"").concat(toString x._2).concat("\")"));

let rec charResultToString (r : PList[(Char, PString)]) : String =
    listToString[(Char, PString)] r
        (\(x : (Char, PString)) -> "(".concat(x._1.toString()).concat(", \"").concat(toString x._2).concat("\")"));

let rec intResultToString (r : PList[(Int, PString)]) : String =
    listToString[(Int, PString)] r
        (\(x : (Int, PString)) -> "(".concat(x._1.toString()).concat(", \"").concat(toString x._2).concat("\")"));

let rec xmlNodeToString (xml : XMLNode) : String =
    case xml of
        XMLText str         -> "XMLText ".concat(toString str)
     |  XMLComment str      -> "XMLComment ".concat(toString str)
     |  XMLAttr attr        -> "XMLAttr (".concat(toString attr._1).concat(", ").concat(toString attr._2).concat(")")
     |  XMLCData cdata      -> "XMLCData ".concat(toString cdata)
     |  XMLElement tag attrs children
            -> "XMLElement ".concat(toString tag)
                            .concat(" ")
                            .concat(listToString[XMLNode] attrs xmlNodeToString)
                            .concat(" ")
                            .concat(listToString[XMLNode] children xmlNodeToString);

let printStringResult (r : PList[(PString, PString)]) =
    print (polyStringResultToString r);

let printCharResult (r : PList[(Char, PString)]) =
    print (charResultToString r);

let printIntResult (r : PList[(Int, PString)]) =
    print (intResultToString r);

let printFirstIntResult (r : PList[(Int, PString)]) =
    case first[(Int, PString)] r of
        Nothing        -> print "Nothing in the List!!!"
     |  Just x        -> print "(".concat(x._1.toString()).concat(", \"").concat(toString x._2).concat("\")");
let printFirstCharResult (r : PList[(Char, PString)]) =
    case first[(Char, PString)] r of
        Nothing        -> print "Nothing in the List!!!"
     |  Just x        -> print "(".concat(x._1.toString()).concat(", \"").concat(toString x._2).concat("\")");
let printFirstStringResult (r : PList[(PString, PString)]) =
    case first[(PString, PString)] r of
        Nothing        -> print "Nothing in the List!!!"
     |  Just x        -> print "(".concat(toString x._1).concat(", \"").concat(toString x._2).concat("\")");
let printFirstXMLResult (r : PList[(XMLNode, PString)]) =
    case first[(XMLNode, PString)] r of
        Nothing        -> print "Nothing in the List!!"
     |  Just x         -> print "(".concat(xmlNodeToString x._1).concat(", \"").concat(toString x._2).concat("\")");

let testingPrefix : String = "\u001b[31;1mtesting\u001b[0m... ";
let (<++>) (a : String) (b : String) : String =
    a.concat(b);

-- Test utilities

let testListEqual : TestFn = {
    name = "listEqual",
    fn   = \(__ : Unit) -> assert (listEqual[Int] (singleton[Int] 1) (singleton[Int] 1))
};

let testMap : TestFn = {
    name = "map",
    fn   = \(__ : Unit) -> assert (listEqual[Char] (map[Char,Char] (\(c : Char) -> 'm') (fromString "hello"))
                                        (fromString "mmmmm"))
};

let testFoldr : TestFn = {
    name = "foldr",
    fn   = \(__ : Unit) -> assert ((foldr[Int,Int] (\(a : Int) (b : Int) -> a + b) 0 (take[Int] 5 (nats 1))) == 15)
};

let testFoldl : TestFn = {
    name = "foldl",
    fn   = \(__ : Unit) -> assert ((foldl[Int,Int] (\(b : Int) (a : Int) -> a + b) 0 (take[Int] 5 (nats 1))) == 15)
};

let testUtilitiesSuite : TestSuite = {
    name = "Test Utilities",
    fns  = testListEqual
                +>[TestFn] (testMap
                +>[TestFn] (testFoldr
                +>[TestFn] (testFoldl
                +>[TestFn] (Nil[TestFn]))))
};

-- Test combinators

let testChar : TestFn = {
    name = "char 'a' (fromString \"abcd\")",
    fn   = \(__ : Unit) -> assert (parseListEqual[Char]
                                      (char 'a' (fromString "abcd"))
                                      (singleton[(Char, PString)] ('a', (fromString "bcd"))))
};

let testUpper : TestFn = {
    name = "upper (fromString \"ABC\")",
    fn   = \(__ : Unit) -> assert (parseListEqual[Char]
                                      (upper (fromString "ABC"))
                                      (singleton[(Char, PString)] ('A', (fromString "BC"))))
};

let testLetter : TestFn = {
    name = "letter (fromString \"abcd\")",
    fn   = \(__ : Unit) -> assert (parseListEqual[Char] (letter (fromString "abcd"))
                                    (singleton[(Char, PString)] ('a', (fromString "bcd"))))
};

let testString : TestFn = {
    name = "string (fromString \"abc\") (fromString \"abcd\")",
    fn   = \(__ : Unit) -> assert (parseStringEqual (string (fromString "abc") (fromString "abcd"))
                                         (singleton[(PString, PString)] ((fromString "abc"), (fromString "d"))))
};

let testMany : TestFn = {
    name = "many (char 'a') (fromString \"aaab\")",
    fn   = \(__ : Unit) -> printStringResult (many[Char] (char 'a') (fromString "aaab"))
};

let testMany1 : TestFn = {
    name = "many1 (char 'a') (fromString \"aaab\")",
    fn   = \(__ : Unit) -> printStringResult (many1[Char] (char 'a') (fromString "aaab"))
};

let testChoice : TestFn = {
    name = "choice (char 'a') (char 'b') (fromString \"aaab\")",
    fn   = \(__ : Unit) -> assert (parseListEqual[Char] (choice[Char] (char 'a') (char 'b') (fromString "aaab"))
                                 (singleton[(Char, PString)] ('a', fromString "aab")))
};

let testChoice2 : TestFn = {
    name = "choice (string \"aa\") (string \"aaa\") (fromString \"aaab\")",
    fn   = \(__ : Unit) -> {
        printStringResult (choice[PString] (string (fromString "aa")) (string (fromString "aaa")) (fromString "aaab"));
    assert (parseStringEqual (choice[PString] (string (fromString "aa")) (string (fromString "aaa")) (fromString "aaab"))
           (concat2[(PString, PString)] (singleton[(PString, PString)] (fromString "aa", fromString "ab"))
                                        (singleton[(PString, PString)] (fromString "aaa", fromString "b"))))
    }
};

let testWord : TestFn = {
    name = "word (fromString \"aaabcd abcd\")",
    fn   = \(__ : Unit) -> printStringResult (word (fromString "aaabcd abcd"))
};

let testNatural : TestFn = {
    name = "natural (fromString \"12345\")",
    fn   = \(__ : Unit) -> printIntResult (natural (fromString "12345"))
};

let testSepby1 : TestFn = {
    name = "sepby1[PString, Char] word (char ',') (fromString \"abc,def\")",
    fn   = \(__ : Unit) ->
        assert (len[(PList[PString], PString)] (sepby1[PString, Char] (word) (char ',') (fromString "abc,def")) == 6)
};

let testNoneOf : TestFn = {
    name = "noneof (fromString \"abc\") (fromString \"dce\")",
    fn   = \(__ : Unit) ->
        printFirstCharResult (noneof (fromString "abc") (fromString "dce"))
};

let testCombinatorsSuite : TestSuite = {
    name = "Test Combinators",
    fns  = testChar
                +>[TestFn] (testUpper
                +>[TestFn] (testLetter
                +>[TestFn] (testString
                +>[TestFn] (testMany
                +>[TestFn] (testMany1
                +>[TestFn] (testChoice
                +>[TestFn] (testChoice2
                +>[TestFn] (testWord
                +>[TestFn] (testNatural
                +>[TestFn] (testSepby1
                +>[TestFn] (Nil[TestFn])))))))))))
};

-- Test Simple ARithmetic Expression Parser

let testSimpleExpr : TestFn = {
    name = "expr (fromString \"123\")",
    fn   = \(__ : Unit) -> printFirstIntResult (expr (fromString "123"))
};

let testSimpleExprWithBracket : TestFn = {
    name = "expr (fromString \"(123)\")",
    fn   = \(__ : Unit) -> printFirstIntResult (expr (fromString "(123)"))
};

let testSimpleExpr2 : TestFn = {
    name = "expr (fromString \"1+2\")",
    fn   = \(__ : Unit) -> printFirstIntResult (expr (fromString "1+2"))
};

let testSimpleExpr3 : TestFn = {
    name = "expr (fromString \"10+2\")",
    fn   = \(__ : Unit) -> printFirstIntResult (expr (fromString "10+2"))
};

let testSimpleExpr4 : TestFn = {
    name = "expr (fromString \"(10+2)*2\")",
    fn   = \(__ : Unit) -> printFirstIntResult (expr (fromString "(10+2)*2"))
};

let testSimpleExpr5 : TestFn = {
    name = "expr (fromString \"(10+2)*2/6\")",
    fn   = \(__ : Unit) -> printFirstIntResult (expr (fromString "(10+2)*2/6"))
};

let testSimpleArithmetricExprSuite : TestSuite = {
    name = "Test Simple Arithmetic Suite",
    fns  = testSimpleExpr
                +>[TestFn] (testSimpleExprWithBracket
                +>[TestFn] (testSimpleExpr2
                +>[TestFn] (testSimpleExpr3
                +>[TestFn] (testSimpleExpr4
                +>[TestFn] (testSimpleExpr5
                +>[TestFn] (Nil[TestFn]))))))
};

-- Test Naive XML Parser

let testXMLComment : TestFn = {
    name = "xmlComment (fromString \"<!-- hahaa? -->\")",
    fn   = \(__ : Unit) -> printFirstStringResult (xmlComment (fromString "<!-- hahaa? -->"))
};

let testXMLDoubleQuotedString : TestFn = {
    name = "xmlDoubleQuotedString (fromString \"\\\"abcdef\\\"\")",
    fn   = \(__ : Unit) -> printFirstStringResult (xmlDoubleQuotedString (fromString "\"abcdef\""))
};

let testXMLSingleQuotedString : TestFn = {
    name = "xmlSingleQuotedString (fromString \"'abcdef'\")",
    fn   = \(__ : Unit) -> printFirstStringResult (xmlSingleQuotedString (fromString "'abcdef'"))
};

let testXMLText : TestFn = {
    name = "xmlText (fromString \"abcdefg&lt;hijk\")",
    fn   = \(__ : Unit) -> printFirstXMLResult (xmlText (fromString "abcdefg&lt;hijk"))
};

let testXMLTextEmpty : TestFn = {
    name = "xmlText (fromString \"\")",
    fn   = \(__ : Unit) -> printFirstXMLResult (xmlText (fromString ""))
};

let testXMLAttr : TestFn = {
    name = "xmlAttr (fromString \"key = \"vvvalue\"\")",
    fn   = \(__ : Unit) -> printFirstXMLResult (xmlAttr (fromString "key = \"vvvalue\""))
};

let testXMLAttrs : TestFn = {
    name = "xmlAttrs (fromString \"key = \\\"vvvalue\\\" hello = \\\"world\\\" haha='what?'\")",
    fn   = \(__ : Unit) ->
        case first[(PList[XMLNode], PString)]
            (xmlAttrs (fromString "key = \"vvvalue\" hello = \"world\" haha='what?'")) of

            Nothing   ->  print "Noting in the List"
         |  Just x    ->  print "(".concat(listToString[XMLNode] x._1 xmlNodeToString)
                                   .concat(", \"")
                                   .concat(toString x._2)
                                   .concat("\")")
};

let testElementSimple : TestFn = {
    name = "xmlElement (fromString \"<a></a>\")",
    fn   = \(__ : Unit) -> printFirstXMLResult (xmlElement (fromString "<a></a>"))
};

let testElementWithText : TestFn = {
    name = "xmlElement (fromString \"<a>ha?haha!</a>\")",
    fn   = \(__ : Unit) -> printFirstXMLResult (xmlElement (fromString "<a>ha?haha!</a>"))
};

let testElementWithChildren : TestFn = {
    name = "xmlElement (fromString \"<a><b></b></a>\")",
    fn   = \(__ : Unit) -> printFirstXMLResult (xmlElement (fromString "<a><b></b></a>"))
};

let testElementWithChildren2 : TestFn = {
    name = "xmlElement (fromString \"<a><b></b><c></c></a>\")",
    fn   = \(__ : Unit) -> printFirstXMLResult (xmlElement (fromString "<a><b></b><c></c></a>"))
};

let testElementWithAttr : TestFn = {
    name = "xmlElement (fromString \"<a href='/toosimple/sometimes/naive'>ha?haha!</a>\")",
    fn   = \(__ : Unit) ->
        printFirstXMLResult (xmlElement (fromString "<a href='/toosimple/sometimes/naive'>ha?haha!</a>"))
};

let testElementWithAttrWithChildren : TestFn = {
    name = "xmlElement (fromString \"<a href='/toosimple/sometimes/naive'><b></b></a>\")",
    fn   = \(__ : Unit) ->
        printFirstXMLResult (xmlElement (fromString "<a href='/toosimple/sometimes/naive'><b></b></a>"))
};

let testElementSimple2 : TestFn = {
    name = "xmlElement (fromString \"<you young='too' simple='too'><naive>true</naive></you>\")",
    fn   = \(__ : Unit) ->
        printFirstXMLResult
            (xmlElement
                (fromString
                    "<you young='too' simple='too'><naive>true</naive></you>"))
};

let testElementSimpleEndTag : TestFn = {
    name = "xmlElement (fromString \"<a/>\")",
    fn   = \(__ : Unit) ->
        printFirstXMLResult (xmlElement (fromString "<a/>"))
};

let testNaiveXMLParserSuite : TestSuite = {
    name = "Test Naive XML Parser",
    fns  = testXMLComment
                +>[TestFn] (testXMLDoubleQuotedString
                +>[TestFn] (testXMLSingleQuotedString
                +>[TestFn] (testXMLText
                +>[TestFn] (testXMLTextEmpty
                +>[TestFn] (testXMLAttr
                +>[TestFn] (testXMLAttrs
                +>[TestFn] (testElementSimple
                +>[TestFn] (testElementWithText
                +>[TestFn] (testElementWithChildren
                +>[TestFn] (testElementWithChildren2
                +>[TestFn] (testElementWithAttr
                +>[TestFn] (testElementWithAttrWithChildren
                +>[TestFn] (testElementSimple2
                +>[TestFn] (testElementSimpleEndTag
                +>[TestFn] (Nil[TestFn])))))))))))))))
};

let parserTestSuites : PList[TestSuite] =
    testUtilitiesSuite
        +>[TestSuite] (testCombinatorsSuite
        +>[TestSuite] (testSimpleArithmetricExprSuite
        +>[TestSuite] (testNaiveXMLParserSuite
        +>[TestSuite] (Nil[TestSuite]))));

{
    runTestSuites parserTestSuites;

    "\n-- END --"
}
