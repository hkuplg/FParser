
{-#
  INCLUDE "prelude.sf"
  INCLUDE "lplist.sf"
  INCLUDE "lpstring.sf"
#-}

-- State definition
type State[S, A] = S -> (A, S);

-- Error message
data Message = SysUnexpected String
             | Unexpected String
             | Expect String
             | Message String
             ;

let messageToString (e : Message) : String =
    case e of
        SysUnexpected s     -> "SysUnexpected \{s}"
     |  Unexpected s        -> "Unexpected \{s}"
     |  Expect s            -> "Expect \{s}"
     |  Message s           -> "Message \{s}";

-- Source position
type SourceName   = String;
type Line         = Int;
type Column       = Int;

data SourcePos = SourcePos SourceName Line Column;

let newSourcePos (name : SourceName) (line : Line) (column : Column) : SourcePos =
    SourcePos name line column;

let initialPos (s : SourceName) : SourcePos =
    SourcePos s 1 1;

let sourceName (p : SourcePos) : SourceName =
    case p of
        SourcePos name _ _ -> name;

let sourceLine (p : SourcePos) : Line =
    case p of
        SourcePos _ line _ -> line;

let sourceColumn (p : SourcePos) : Column =
    case p of
        SourcePos _ _ c -> c;

let incSourceLine (p : SourcePos) (n : Line) : SourcePos =
    case p of
        SourcePos name line col -> SourcePos name (line+n) col;

let incSourceColumn (p : SourcePos) (n : Column) : SourcePos =
    case p of
        SourcePos name line col -> SourcePos name line (col+n);

let updatePosChar (p : SourcePos) (c : Char) : SourcePos =
    if c `charEq` '\n' then
        case p of
            SourcePos name line col -> SourcePos name (line+1) 1
    else
        incSourceColumn p 1;

let updatePosLPString (p : SourcePos) (s : LPString) : SourcePos =
    lFoldl[Char, SourcePos] updatePosChar p s;

let sourcePosToString (p : SourcePos) : String =
    case p of
        SourcePos name line col ->
            "\"\{name}\" (\{line}:\{col})";

let sourcePosCompare (p1 : SourcePos) (p2 : SourcePos) : Order =
    case p1 of
        SourcePos _ line1 col1 ->
            case p2 of
                SourcePos _ line2 col2 ->
                    if line1 < line2 then LessThan
                    else if line1 > line2 then GreaterThan
                    else if col1 < col2 then LessThan
                    else if col1 > col2 then GreaterThan
                    else Equals;

let sourcePosEq (p1 : SourcePos) (p2 : SourcePos) : Bool =
    case p1 `sourcePosCompare` p2 of
        Equals      -> True
     |  GreaterThan -> False
     |  LessThan    -> False;

-- Parse error
data ParseError = ParseError SourcePos LPList[Message];

let errorPos (p : ParseError) : SourcePos =
    case p of
        ParseError pos _ -> pos;

let errorMessages (p : ParseError) : LPList[Message] =
    case p of
        ParseError _ msgs -> msgs;

let errorIsUnknown (p : ParseError) : Bool =
    case p of
        ParseError _ msgs -> lIsempty[Message] msgs;

let newErrorUnknown (pos : SourcePos) : ParseError =
    ParseError pos (LNil[Message]);

let newErrorMessage (msg : Message) (pos : SourcePos) =
    ParseError pos (lSingleton[Message] msg);

let addErrorMessage (msg : Message) (err : ParseError) =
    case err of
        ParseError pos msgs -> ParseError pos (msg %+>[Message] msgs);

let mergeError (err1 : ParseError) (err2 : ParseError) : ParseError =
    case err1 of
        ParseError pos1 msgs1 ->
            case err2 of
                ParseError pos2 msgs2 ->
                    if lIsempty[Message] msgs1 then err2
                    else if lIsempty[Message] msgs2 then err1
                    else
                        case pos1 `sourcePosCompare` pos2 of
                            Equals      ->  ParseError pos1 (msgs1 %++[Message] msgs2)
                         |  GreaterThan ->  err1
                         |  LessThan    ->  err2;

let parseErrorToString (err : ParseError) : String =
    case err of
        ParseError pos msgs ->
            "\{sourcePosToString pos}:\{lPListToString[Message] messageToString msgs}";

-- Parse Position

type ParsePos = (SourcePos, SourcePos);

let parseBeginPos (p : ParsePos) : SourcePos =
    p._1;

let parseEndPos (p : ParsePos) : SourcePos =
    p._2;

let parsePosEq (a : ParsePos) (b : ParsePos) : Bool =
    (a._1 `sourcePosEq` b._1) && (a._2 `sourcePosEq` b._2);

let parsePosToString (a : ParsePos) : String =
    "\{sourcePosToString a._1}..\{sourcePosToString a._2}";

-- Parse Result

type ParseResult[A] = (A, ParsePos);

let parseResultValue[A] (r : ParseResult[A]) : A =
    r._1;

let parseResultPos[A] (r : ParseResult[A]) : ParsePos =
    r._2;

let parseResultEq[A] (eq : Eq[A]) (a : ParseResult[A]) (b : ParseResult[A]) : Bool =
    (a._1 `eq` b._1) && (a._2 `parsePosEq` b._2);

let parseResultToString[A] (str : Show[A]) (res : ParseResult[A]) : String =
    "(\{str res._1}, \{parsePosToString res._2})";

type ParseInput = (SourcePos, LPString);

let newParseInput (pos : SourcePos) (src : LPString) : ParseInput =
    (pos, src);

let parseInputPos (inp : ParseInput) : SourcePos =
    inp._1;

let parseInputData (inp : ParseInput) : LPString =
    inp._2;

let parseInputInit (src : LPString) : ParseInput =
    (initialPos "<default>", src);

let parseInputInitWithName (name : String) (src : LPString) : ParseInput =
    (initialPos "<default>", src);

let parseInputEq (a : ParseInput) (b : ParseInput) : Bool =
    (a._1 `sourcePosEq` b._1) && (a._2 `lPStringEq` b._2);

let parseInputToString (a : ParseInput) : String =
    "\"\{lPStringToString a._2}\" @ \"\{sourcePosToString a._1}\"";

type ParseContext[A] = (A, ParseInput);

let newParseContext[A] (a : A) (inp : ParseInput) : ParseContext[A] =
    (a, inp);

let parseContextResult[A] (c : ParseContext[A]) : A =
    c._1;

let parseContextInput[A] (c : ParseContext[A]) : ParseInput =
    c._2;

let parseContextEq[A] (eq : Eq[A]) (a : ParseContext[A]) (b : ParseContext[A]): Bool =
    (eq a._1 b._1) && (a._2 `parseInputEq` b._2);

let parseContextToString[A] (str : Show[A]) (c : ParseContext[A]) : String =
    "(\{str c._1}, \{parseInputToString c._2})";

-- Parser type definition

type ParseOutput[A] = LPList[ParseContext[A]];

let parseOutputEq[A] (eq : Eq[A]) (a : ParseOutput[A]) (b : ParseOutput[A]) : Bool =
    lPListEq[ParseContext[A]]
        (parseContextEq[A] eq)
        a b;

let parseOutputToString[A] (str : Show[A]) (res : ParseOutput[A]) : String =
    lPListToString[ParseContext[A]]
        (parseContextToString[A] str)
        res;

type Parser[A] = ParseInput -> ParseOutput[A];


let parseLPString[A] (p : Parser[A]) (src : LPString) : ParseOutput[A] =
    p (parseInputInit src);

let parseString[A] (p : Parser[A]) (src : String) : ParseOutput[A] =
    parseLPString[A] p (lPStringFromString src);

let parsePString[A] (p : Parser[A]) (src : PString) : ParseOutput[A] =
    parseLPString[A] p (lPStringFromPString src);

let parseLPStringWithName[A] (p : Parser[A]) (name : String) (src : LPString) : ParseOutput[A] =
    p (parseInputInitWithName name src);

let parseStringWithName[A] (p : Parser[A]) (name : String) (src : String) : ParseOutput[A] =
    p (parseInputInitWithName name (lPStringFromString src));

-- Primitive Parsers

let result[V] (value : V) : Parser[V] =
    \(inp : ParseInput) -> lSingleton[ParseContext[V]] (newParseContext[V] value inp);

let zero[V] : Parser[V] =
    \(inp : ParseInput) -> LNil[ParseContext[V]];

let item : Parser[Char] =
    \(inp : ParseInput) ->
        case parseInputData inp of
            LNil         ->      LNil[ParseContext[Char]]
          | LCons c xs   ->
                lSingleton[ParseContext[Char]]
                    (newParseContext[Char] c (newParseInput (updatePosChar (parseInputPos inp) c) (invoke[LPString] xs)));

-- Combinators

let bind[A, B] (p : Parser[A]) (f : A -> Parser[B]) : Parser[B] =
    \(inp : ParseInput) ->
        lConcat[ParseContext[B]]
              (lMap[ParseContext[A], ParseOutput[B]]
                  (\(v : ParseContext[A]) -> f (parseContextResult[A] v) (parseContextInput[A] v)) (p inp));

let (>>=)[A, B] (p : Parser[A]) (f : A -> Parser[B]) : Parser[B] =
    bind[A, B] p f;

let (>>)[A, B] (p : Parser[A]) (q : Parser[B]) : Parser[B] =
    p >>=[A, B] (\(__ : A) -> q);

let (<*)[A, B] (p : Parser[A]) (q : Parser[B]) : Parser[A] =
    p >>=[A, A] (\(a : A) ->
    q >>=[B, A] (\(__ : B) ->
    result[A] a));

let (*>)[A, B] (p : Parser[A]) (q : Parser[B]) : Parser[B] =
    p >>[A, B] q;

let using[A, B] (p : Parser[A]) (f : A -> B) : Parser[B] =
    bind[A, B] p (\(a : A) -> result[B] (f a));

let (<$>)[A, B] (p : Parser[A]) (f : A -> B) : Parser[B] =
    using[A, B] p f;

let ($>)[A, B] (p : Parser[A]) (b : B) : Parser[B] =
    using[A, B] p (\(__ : A) -> b);

let seq[A, B] (p : Parser[A]) (q : Parser[B]) : Parser[(A, B)] =
    bind[A, (A, B)] p (\(x : A) ->
    bind[B, (A, B)] q (\(y : B) ->
    result[(A, B)] (x, y)));

let choice[A] (p : Parser[A]) (q : Parser[A]) : Parser[A] =
    \(inp : ParseInput) ->
        (p inp) %+~[ParseContext[A]] (\(__ : Unit) -> q inp);

let (<|>)[A] (p : Parser[A]) (q : Parser[A]) : Parser[A] =
    choice[A] p q;

let sat (f : Char -> Bool) : Parser[Char] =
    bind[Char, Char] item (\(x : Char) -> if f x then (result[Char] x) else zero[Char]);

let char (x : Char) : Parser[Char] =
    sat (\(y : Char) -> x `charEq` y);

let notchar (x : Char) : Parser[Char] =
    sat (\(y : Char) -> x != y);

let digit : Parser[Char] =
    sat (\(x : Char) -> java.lang.Character.isDigit(x));

let upper : Parser[Char] =
    sat (\(x : Char) -> java.lang.Character.isUpperCase(x));

let lower : Parser[Char] =
    sat (\(x : Char) -> java.lang.Character.isLowerCase(x));

let space : Parser[Char] =
    sat (\(x : Char) -> java.lang.Character.isSpaceChar(x));

let whitespace : Parser[Char] =
    sat (\(x : Char) -> java.lang.Character.isWhitespace(x));

let letter : Parser[Char] =
    choice[Char] lower upper;

let alphanum : Parser[Char] =
    choice[Char] letter digit;

let noneof (s : String) : Parser[Char] =
    sat (\(x : Char) -> (lCharin x (lPStringFromString s)) `boolEq` False);

let oneof (s : String) : Parser[Char] =
    sat (\(x : Char) -> (lCharin x (lPStringFromString s)));

let rec stringWithLPString (s : LPString) : Parser[LPString] =
    case s of
        LNil         ->  result[LPString] (LNil[Char])
     |  LCons x xs   ->
            let xs = invoke[LPString] xs;
            (char x)
                >>[Char, LPString] (stringWithLPString xs)
                $>[LPString, LPString] (x %+>[Char] xs);

let string (s : String) : Parser[LPString] =
    stringWithLPString (lPStringFromString s);

let eol : Parser[Unit] =
    ((string "\r\n") $>[LPString, Unit] ())
        <|>[Unit] ((char '\r')    $>[Char, Unit] ())
        <|>[Unit] ((char '\n')    $>[Char, Unit] ());

let eof : Parser[Unit] =
    \(inp : ParseInput) ->
        case parseInputData inp of
            LNil         -> lSingleton[ParseContext[Unit]] (newParseContext[Unit] () inp)
         |  LCons _ _    -> (LNil[ParseContext[Unit]]);

-- Repetition

let rec many[A] (p : Parser[A]) : Parser[LPList[A]] =
    choice[LPList[A]] (bind[A, LPList[A]] p (\(x : A) ->
                      bind[LPList[A], LPList[A]] (many[A] p) (\(xs : LPList[A]) ->
                      result[LPList[A]] (x %+>[A] xs))))
                     (result[LPList[A]] (LNil[A]));

let many1[A] (p : Parser[A]) : Parser[LPList[A]] =
    bind[A, LPList[A]] p (\(x : A) ->
    bind[LPList[A], LPList[A]] (many[A] p) (\(xs : LPList[A]) ->
    result[LPList[A]] (x %+>[A] xs)));

let word : Parser[LPString] =
    many1[Char] letter;

let ident : Parser[LPString] =
    bind[Char, LPString]    lower (\(x : Char) ->
    bind[LPString, LPString] (many[Char] alphanum) (\(xs : LPString) ->
    result[LPString] (x %+>[Char] xs)));

let natural : Parser[Int] =
    let eval (xs : LPList[Char]) =
        lFoldl[Int, Int] (\(b : Int) (a : Int) -> 10 * b + a)
                        0
                        (lMap[Char, Int] (\(c : Char) -> java.lang.Character.digit(c, 10)) xs);

    bind[LPList[Char], Int] (many1[Char] digit) (\(xs : LPList[Char]) -> result[Int] (eval xs));

let hexdecimal : Parser[Int] =
    let eval (xs : LPList[Char]) =
        lFoldl[Int, Int] (\(b : Int) (a : Int) -> 16 * b + a)
                        0
                        (lMap[Char, Int] (\(c : Char) -> java.lang.Character.digit(c, 16)) xs);
    (many1[Char] (oneof "1234567890abcdefABCDEF"))
        <$>[LPList[Char], Int] (\(xs : LPList[Char]) -> eval xs);

let int : Parser[Int] =
    choice[Int] ((char '-') >>[Char, Int]
                 (using[Int,Int] natural (\(n : Int) -> (-n))))
              natural;

-- Repetition with seperators

let sepby1[A, B] (p : Parser[A]) (sep : Parser[B]) : Parser[LPList[A]] =
    let rep[A, B] (p : Parser[A]) : Parser[A] =
        bind[B, A] sep (\(s : B) -> bind[A, A] p (\(y : A) -> result[A] y));
    bind[A, LPList[A]]        p                       (\(x : A) ->
    bind[LPList[A], LPList[A]] (many[A] (rep[A, B] p)) (\(xs : LPList[A]) ->
    result[LPList[A]] (LCons[A] x (\(__ : Unit) -> xs))));

-- The `sep` has to appear at least once
let sepby2[A, B] (p : Parser[A]) (sep : Parser[B]) : Parser[LPList[A]] =
    let rep[A, B] (p : Parser[A]) : Parser[A] =
        bind[B, A] sep (\(s : B) -> bind[A, A] p (\(y : A) -> result[A] y));
    bind[A, LPList[A]]        p                       (\(x : A) ->
    bind[LPList[A], LPList[A]] (many1[A] (rep[A, B] p)) (\(xs : LPList[A]) ->
    result[LPList[A]] (LCons[A] x (\(__ : Unit) -> xs))));

let sepby[A, B] (p : Parser[A]) (sep : Parser[B]) : Parser[LPList[A]] =
    choice[LPList[A]] (sepby1[A, B] p sep) (result[LPList[A]] (LNil[A]));

let between[L, R, P] (l : Parser[L]) (r : Parser[R]) (p : Parser[P]) : Parser[P] =
    l *>[L, P] p <*[P, R] r;

-- More complicated

-- Parses non-empty sequences of items seperated by operators that associate to the left
let chainl1[A] (p : Parser[A]) (op : Parser[A -> A -> A]) : Parser[A] =
    let fy =
        bind[A -> A -> A, (A -> A -> A, A)] op (\(f : A -> A -> A) ->
        bind[A, (A -> A -> A, A)]           p  (\(y : A) ->
        result[(A -> A -> A, A)] (f, y)));

    bind[A, A]                           p                            (\(x : A) ->
    bind[LPList[(A -> A -> A, A)], A]     (many[(A -> A -> A, A)] fy)  (\(fys: LPList[(A -> A -> A, A)]) ->
    result[A] (lFoldl[(A -> A -> A, A), A] (\(x : A) (fy : (A -> A -> A, A)) -> fy._1 x fy._2) x fys)));

-- associate to the right
let rec chainr1[A] (p : Parser[A]) (op : Parser[A -> A -> A]) : Parser[A] =
    bind[A, A] p (\(x : A) ->
        choice[A] (bind[A -> A -> A, A] op (\(f : A -> A -> A) ->
                 bind[A, A] (chainr1[A] p op) (\(y : A) -> -- Calculate the result on the right
                 result[A] (f x y))))
                (result[A] x));

let chainl[A] (p : Parser[A]) (op : Parser[A -> A -> A]) (v : A) : Parser[A] =
    choice[A] (chainl1[A] p op) (result[A] v);

let chainr[A] (p : Parser[A]) (op : Parser[A -> A -> A]) (v : A) : Parser[A] =
    choice[A] (chainr1[A] p op) (result[A] v);


-- Pre-defined
let parenthesis[P] (p : Parser[P]) : Parser[P] =
    between[Char, Char, P] (char '(') (char ')') p;

let braces[P] (p : Parser[P]) : Parser[P] =
    between[Char, Char, P] (char '{') (char '}') p;

let angles[P] (p : Parser[P]) : Parser[P] =
    between[Char, Char, P] (char '<') (char '>') p;

let brackets[P] (p : Parser[P]) : Parser[P] =
    between[Char, Char, P] (char '[') (char ']') p;

-- Improved Laziness (Haven't supported in F2J yet)

-- Pick the first (if exists) result
--let only[A] (p : Parser[A]) : Parser[A] =
--    \(inp : ParseInput) ->
--        case (p inp) of
--            LNil         -> (LNil[(A, LPString)])
--         |  LCons x xs   -> (singleton[(A, LPString)] x);

let only[A] (p : Parser[A]) : Parser[A] =
    \(inp : ParseInput) -> lTake[ParseContext[A]] 1 (p inp);

