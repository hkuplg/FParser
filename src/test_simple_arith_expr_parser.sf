{-#
    INCLUDE "eq.sf"
    INCLUDE "pstring.sf"
    INCLUDE "testfx.sf"
    INCLUDE "test_parser_helpers.sf"
    INCLUDE "simple_arith_expr_parser.sf"
#-}

-- Test Simple ARithmetic Expression Parser

let testSimpleExpr : TestFn = {
    name = "expr (pStringFromString \"123\")",
    fn   = \(__ : Unit) ->
        assertFirstParseOutputEq[Int]
            intEq
            intToString
            (expr `parsePString[Int]` (pStringFromString "123"))
            (123, ((SourcePos "<default>" 1 4), pStringFromString ""))
};

let testSimpleExprWithBracket : TestFn = {
    name = "expr (pStringFromString \"(123)\")",
    fn   = \(__ : Unit) ->
        assertFirstParseOutputEq[Int]
            intEq
            intToString
            (expr `parsePString[Int]` (pStringFromString "(123)"))
            (123, ((SourcePos "<default>" 1 6), pStringFromString ""))
};

let testSimpleExpr2 : TestFn = {
    name = "expr (pStringFromString \"1+2\")",
    fn   = \(__ : Unit) ->
        assertFirstParseOutputEq[Int]
            intEq
            intToString
            (expr `parsePString[Int]` (pStringFromString "1+2"))
            (3, ((SourcePos "<default>" 1 4), pStringFromString ""))
};

let testSimpleExpr3 : TestFn = {
    name = "expr (pStringFromString \"10+2\")",
    fn   = \(__ : Unit) ->
        assertFirstParseOutputEq[Int]
            intEq
            intToString
            (expr `parsePString[Int]` (pStringFromString "10+2"))
            (12, ((SourcePos "<default>" 1 5), pStringFromString ""))
};

let testSimpleExpr4 : TestFn = {
    name = "expr (pStringFromString \"(10+2)*2\")",
    fn   = \(__ : Unit) ->
        assertFirstParseOutputEq[Int]
            intEq
            intToString
            (expr `parsePString[Int]` (pStringFromString "(10+2)*2"))
            (24, ((SourcePos "<default>" 1 9), pStringFromString ""))
};

let testSimpleExpr5 : TestFn = {
    name = "expr (pStringFromString \"(10+2)*2/6\")",
    fn   = \(__ : Unit) ->
        assertFirstParseOutputEq[Int]
            intEq
            intToString
            (expr `parsePString[Int]` (pStringFromString "(10+2)*2/6"))
            (4, ((SourcePos "<default>" 1 11), pStringFromString ""))
};

let testSimpleArithmetricExprSuite : TestSuite = {
    name = "Test Simple Arithmetic Suite",
    fns  = testSimpleExpr
                +>[TestFn] (testSimpleExprWithBracket
                +>[TestFn] (testSimpleExpr2
                +>[TestFn] (testSimpleExpr3
                +>[TestFn] (testSimpleExpr4
                +>[TestFn] (testSimpleExpr5
                +>[TestFn] (Nil[TestFn]))))))
};
