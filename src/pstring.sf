{-# INCLUDE "plist.sf" #-}
{-# INCLUDE "thunk.sf" #-}

-- ADT String

type PString = PList[Char];

let pStringToString (l : PString) : String =
    (foldl[Char, java.lang.StringBuilder]
        (\(b : java.lang.StringBuilder) (a : Char) -> b.append(a))
        (new java.lang.StringBuilder( ))
        l).toString();

let pStringFromString (str : String) : PString =
    let rec inner (str : String) (idx : Int) : PString =
        if idx `intEq` str.length() then
            (Nil[Char])
        else
            (Cons[Char] str.charAt(idx) (\(__ : Unit) -> (inner str (idx+1))));
    inner str 0;

let rec pStringEq (a : PString) (b : PString) : Bool =
    pListEq[Char] charEq a b;

let rec charin (c : Char) (str : PString) : Bool =
    case str of
        Nil         ->      False
     |  Cons x xs   ->      if x.equals(c) then
                                True
                            else
                                (charin c (invoke[PString] xs));
