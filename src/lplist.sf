
{-# INCLUDE "plist_ref.sf" #-}
{-# INCLUDE "thunk.sf" #-}
{-# INCLUDE "maybe.sf" #-}
{-# INCLUDE "eq.sf" #-}

data LPList[A] = LNil
               | LCons A (Thunk[LPList[A]])
               ;

let rec nats (beg : Int) : LPList[Int] =
    LCons[Int] beg (\(__ : Unit) -> nats (beg+1));

-- Utilities

let lSingleton[A] (x : A) : LPList[A] =
    LCons[A] x (\(__: Unit) -> (LNil[A]));

let rec lMap[A, B] (f : A -> B) (l : LPList[A]) : LPList[B] =
    case l of
        LNil             ->      LNil[B]
     |  LCons x xs       ->      LCons[B] (f x) (\(__ : Unit) -> (lMap[A, B] f (invoke[LPList[A]] xs)));

let rec lFoldl[A, B] (f : B -> A -> B) (z : B) (l : LPList[A]) : B =
    case l of
        LNil             ->      z
     |  LCons x xs       ->      lFoldl[A, B] f (f z x) (invoke[LPList[A]] xs);

--let rec foldr[A, B] (f : A -> B -> B) (z : B) (l : LPList[A]) : B =
--    case l of
--        LNil             ->      z
--     |  LCons x xs       ->      f x (foldr[A, B] f z (invoke[LPList[A]] xs));

let lFoldr[A, B] (f : A -> B -> B) (z : B) (l : LPList[A]) : B =
    let rec inner (s : LPList[A]) (k : B -> B) : B =
        case s of
            LNil         -> k z
         |  LCons x xs   -> inner (invoke[LPList[A]] xs) (\(y : B) -> k (f x y));
    inner l (\(x : B) -> x);


let lJoin[A] (l : LPList[A]) (j : A) : LPList[A] =
    let rec inner[A] (l : LPList[A]) (j : A) : LPList[A] =
        case l of
            LNil         -> (LNil[A])
         |  LCons x xs   -> (LCons[A] j (\(__ : Unit) ->
                                (LCons[A] x (\(__ : Unit) -> inner[A] (invoke[LPList[A]] xs) j))));
    case l of
        LNil         -> (LNil[A])
     |  LCons x xs   -> (LCons[A] x (\(__ : Unit) -> inner[A] (invoke[LPList[A]] xs) j));

let (%+>)[A] (a : A) (l : LPList[A]) : LPList[A] =
    LCons[A] a (\(__ : Unit) -> l);

let rec lConcat2[A] (a : LPList[A]) (b : LPList[A]) : LPList[A] =
    case a of
        LNil         ->  b
      | LCons x xs   ->  LCons[A] x (\(__ : Unit) -> (lConcat2[A] (invoke[LPList[A]] xs) b));

let rec lLazyconcat2[A] (a : LPList[A]) (b : Thunk[LPList[A]]) : LPList[A] =
    case a of
        LNil         ->  (invoke[LPList[A]] b)
      | LCons x xs   ->  LCons[A] x (\(__ : Unit) -> (lLazyconcat2[A] (invoke[LPList[A]] xs) b));

let (%++)[A] (a : LPList[A]) (b : LPList[A]) : LPList[A] =
    lConcat2[A] a b;

let (%+~)[A] (a : LPList[A]) (b : Thunk[LPList[A]]) : LPList[A] =
    lLazyconcat2[A] a b;

let rec lConcat[A] (l : LPList[LPList[A]]) : LPList[A] =
    case l of
        LNil         ->  LNil[A]
     |  LCons x xs   ->  x %+~[A] (\(__ : Unit) -> (lConcat[A] (invoke[LPList[LPList[A]]] xs)));

let rec lLen[A] (l : LPList[A]) : Int =
    case l of
        LNil         ->  0
     |  LCons _ xs   ->  1 + (lLen[A] (invoke[LPList[A]] xs));

let lIsempty[A] (l : LPList[A]) : Bool =
    case l of
        LNil         -> True
     |  LCons _ _    -> False;

let lFirst[A] (l : LPList[A]) : Maybe[A] =
    case l of
        LNil         -> Nothing[A]
     |  LCons x _    -> Just[A] x;

let lRest[A] (l : LPList[A]) : Maybe[LPList[A]] =
    case l of
        LNil         -> Nothing[LPList[A]]
     |  LCons _ xs   -> Just[LPList[A]] (invoke[LPList[A]] xs);

let rec lTake[A] (n : Int) (l : LPList[A]) : LPList[A] =
    if n <= 0 then
        (LNil[A])
    else
        case l of
            LNil         ->  LNil[A]
         |  LCons x xs   ->  LCons[A] x (\(__ : Unit) -> (lTake[A] (n-1) (invoke[LPList[A]] xs)));

let rec lZip[A, B] (a : LPList[A]) (b : LPList[B]) : LPList[(A, B)] =
    case a of
        LNil         -> LNil[(A, B)]
     |  LCons xa xsa ->
            case b of
                LNil         -> LNil[(A, B)]
             |  LCons xb xsb ->
                    LCons[(A, B)] (xa, xb) (\(__ : Unit) -> lZip[A, B] (invoke[LPList[A]] xsa) (invoke[LPList[B]] xsb));

let lPListToString[A] (tostr : A -> String) (l : LPList[A]) : String =
    type StringBuilder = java.lang.StringBuilder;

    let inner = lFoldl[String, StringBuilder]
                    (\(b : StringBuilder) (a : String) -> b.append(a))
                    (new java.lang.StringBuilder("["))
                    (lJoin[String] (lMap[A, String] tostr l) ", ");

    inner.append("]").toString();

let rec lPListEq[A] (eq : Eq[A]) (a : LPList[A]) (b : LPList[A]) : Bool =
    case a of
        LNil         -> { case b of LNil -> True | LCons _ _ -> False }
     |  LCons ax axs ->
            case b of
                LNil         -> False
             |  LCons bx bxs -> if eq ax bx then
                                    lPListEq[A] eq (invoke[LPList[A]] axs) (invoke[LPList[A]] bxs)
                               else False;

let rec lPListToPList[A] (l : LPList[A]) : PList[A] =
    case l of
        LNil         -> (Nil[A])
     |  LCons x xs   -> Cons[A] x (lPListToPList[A] (invoke[LPList[A]] xs));
