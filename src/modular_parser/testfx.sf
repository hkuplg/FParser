-- Test

{-# INCLUDE "plist.sf" #-}
{-# INCLUDE "show.sf" #-}

let println (s : String) : Unit = { java.lang.System.out.println(s); () };
let print (s : String) : Unit = { java.lang.System.out.print(s); () };

type TestFn = {
    name : String,
    fn   : Unit -> Unit
};

type TestSuite = {
    name : String,
    fns  : PList[TestFn]
};

let runTest (test : TestFn) : Unit = {
    let testingPrefix : String = "\u001b[31;1mtesting\u001b[0m\t";
    println testingPrefix.concat(test.name).concat(" :");
    test.fn ();
    println "\t...passed"
};

let runTests (tests : PList[TestFn]) : Unit =
    foldl[TestFn, Unit]
        (\(__ : Unit) (fn : TestFn) -> runTest fn) () tests;

let runTestSuite (suite : TestSuite) : Unit = {
    println "\n\t\u001b[32;1mRunning\u001b[37;1m ".concat(suite.name).concat("\u001b[0m ...\n");
    println "Running ".concat((len[TestFn] suite.fns).toString()).concat(" tests");
    runTests suite.fns
};

let runTestSuites (suites : PList[TestSuite]) : Unit =
    foldl[TestSuite, Unit]
        (\(__ : Unit) (suite : TestSuite) -> runTestSuite suite) () suites;

-- let error (msg : String) = {
--     java.lang.System.err.println(msg);
--     java.lang.System.exit(1);
--     ()
-- };

let assert (b : Bool) =
    if b then
        ()
    else
        error[Unit] "Assert failed!";

let assertEq[A] (eq : Eq[A]) (show : Show[A]) (src : A) (expected : A) =
    if src `eq` expected then
        ()
    else
        error[Unit] "Assert failed!\n\tExpecting: \{show expected}\n\tBut Found: \{show src}";
