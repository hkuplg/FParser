{-#
    INCLUDE "parser.sf"
    INCLUDE "pstring.sf"
    INCLUDE "maybe.sf"
    INCLUDE "plist.sf"
    INCLUDE "pstring.sf"
#-}

{-

Syntax:
L ::= class C extends C { C f; K M }
K ::= C(C f) { super(f); this.f=f; }
M ::= C m(C x) { return e; }
e ::= x | e.f | e.m(e) | new C(e) | (C)e

-}

data FJComment = FJLineComment String
               | FJBlockComment String
               ;

let rec fjCommentToString (cm : FJComment) : String =
    case cm of
        FJLineComment c     -> "FJLineComment \{c}"
     |  FJBlockComment c    -> "FJBlockComment \{c}";

-- let fjBlockComment : Parser[FJComment] =
--     let rec innerBlock (needTrim : Bool) : Parser[PString] =
--         ((string "/*") *>[PString, PString] (innerBlock False) <*[PString, PString] (string "*/")
--             <$>[PString, PString] (\(inner : PString) ->
--                 if needTrim then
--                     inner
--                 else
--                     (pStringFromString "/*") ++[Char] inner ++[Char] (pStringFromString "*/")))
--         <|>[PString]
--         -- (many1[Char] (noneof "/*"));
--         (many1[Char] item);

--     (innerBlock True) <$>[PString, FJComment] (\(s : PString) -> FJBlockComment (pStringToString s));

-- let fjLineComment : Parser[FJComment] =
--     (string "//")
--         *>[PString, PString]   (many[Char] (noneof "\r\n"))
--         <*[PString, Unit]      (eol <|>[Unit] eof)
--         <$>[PString, FJComment] (\(cmt : PString) -> FJLineComment (pStringToString cmt));

-- let fjComment : Parser[FJComment] =
--     fjLineComment
--         <|>[FJComment]
--             fjBlockComment;

let fjSpace : Parser[Unit] =
    many[Char] whitespace $>[PList[Char], Unit] ();

let fjSpace1 : Parser[Unit] =
    many1[Char] whitespace $>[PList[Char], Unit] ();

data FJType = FJType String;

let fjTypeToString (c : FJType) : String =
    case c of
        FJType c  -> "FJType \{c}";

let fjTypeEq (a : FJType) (b : FJType) : Bool =
    case a of
        FJType s1 ->
            case b of
                FJType s2 -> stringEq s1 s2;

let fjType : Parser[FJType] =
    let inner : Parser[PString] =
        bind[Char, PString]    letter (\(x : Char) ->
        bind[PString, PString] (many[Char] alphanum) (\(xs : PString) ->
        result[PString] (x +>[Char] xs)));

    (only[PString] inner)
        <$>[PString, FJType] (\(s : PString) -> (FJType (pStringToString s)));

type FJIdentifier = String;

let fjIdentifierEq (a : FJIdentifier) (b : FJIdentifier) : Bool =
    stringEq a b;

let fjIdentifier : Parser[PString] =
    let inner : Parser[PString] =
        bind[Char, PString]    letter (\(x : Char) ->
        bind[PString, PString] (many[Char] alphanum) (\(xs : PString) ->
        result[PString] (x +>[Char] xs)));

    only[PString] inner;

data FJExpr = FJVariable FJIdentifier
            | FJFieldAccess FJExpr FJIdentifier
            | FJMethodInvoke FJExpr FJIdentifier PList[FJExpr]
            | FJSelfMethodInvoke FJIdentifier PList[FJExpr]
            | FJAllocate FJType PList[FJExpr]
            | FJTypeCast FJType FJExpr
            | FJIntLiteral String
            | FJBracketSurroundedExpr FJExpr
            ;

let rec fjExprToString (expr : FJExpr) : String =
    case expr of
        FJVariable x                    -> "FJVariable \{x}"
     |  FJFieldAccess e f               -> "FJFieldAccess (\{fjExprToString e}), \{f}"
     |  FJMethodInvoke e1 m e2list      -> "FJMethodInvoke (\{fjExprToString e1}), \{m}, (\{pListToString[FJExpr] fjExprToString e2list})"
     |  FJAllocate c elist              -> "FJAllocate \{fjTypeToString c}, (\{pListToString[FJExpr] fjExprToString elist})"
     |  FJTypeCast c e                  -> "FJTypeCast \{fjTypeToString c}, (\{fjExprToString e})"
     |  FJIntLiteral i                  -> "FJIntLiteral \{i}"
     |  FJSelfMethodInvoke m e2list     -> "FJSelfMethodInvoke \{m}, (\{pListToString[FJExpr] fjExprToString e2list})"
     |  FJBracketSurroundedExpr e       -> "FJBracketSurroundedExpr \{fjExprToString e}";

let rec fjExprEq (a : FJExpr) (b : FJExpr) : Bool =
    case a of
        FJVariable x1 -> {
            case b of
                FJVariable x2   -> fjIdentifierEq x1 x2
             |  _               -> False
        }
     |  FJFieldAccess e1 f1 -> {
            case b of
                FJFieldAccess e2 f2 -> (fjExprEq e1 e2) && (fjIdentifierEq f1 f2)
             |  _                   -> False
        }
     |  FJMethodInvoke c1 m1 elist1 -> {
            case b of
                FJMethodInvoke c2 m2 elist2 -> (fjExprEq c1 c2) && (fjIdentifierEq m1 m2) && (pListEq[FJExpr] fjExprEq elist1 elist2)
             |  _                        -> False
        }
     |  FJSelfMethodInvoke m1 elist1 -> {
            case b of
                FJSelfMethodInvoke m2 elist2 -> (fjIdentifierEq m1 m2) && (pListEq[FJExpr] fjExprEq elist1 elist2)
             |  _                            -> False
        }
     |  FJAllocate c1 elist1 -> {
            case b of
                FJAllocate c2 elist2 -> (fjTypeEq c1 c2) && (pListEq[FJExpr] fjExprEq elist1 elist2)
             |  _                    -> False
        }
     |  FJTypeCast c1 e1 -> {
            case b of
                FJTypeCast c2 e2 -> (fjTypeEq c1 c2) && (fjExprEq e1 e2)
             |  _                -> False
        }
     |  FJIntLiteral i1 -> {
            case b of
                FJIntLiteral i2 -> (stringEq i1 i2)
             |  _               -> False
        }
     |  FJBracketSurroundedExpr e1 -> {
            case b of
                FJBracketSurroundedExpr e2 -> fjExprEq e1 e2
             |  _                          -> False
        };

-- x
let fjExprVariable : Parser[FJExpr] =
    (only[PString] fjIdentifier)
        <$>[PString, FJExpr] (\(s : PString) -> FJVariable (pStringToString s));

let rec fjExpr : Parser[FJExpr] =
    let bracketSur : Parser[FJExpr] =
        between[Unit, Unit, FJExpr] ((char '(') >>[Char, Unit] fjSpace) (fjSpace <*[Unit, Char] (char ')'))
            (fjExpr <$>[FJExpr, FJExpr] (\(e : FJExpr) -> FJBracketSurroundedExpr e));

    fjExprFieldAccessOrMethodInvoke
    <|>[FJExpr]
    fjExprWithoutFieldAccessOrMethodInvoke
    <|>[FJExpr]
    bracketSur

and fjExprWithoutFieldAccessOrMethodInvoke : Parser[FJExpr] =
    fjExprSelfMethodInvoke
    <|>[FJExpr]
    fjExprAllocate
    <|>[FJExpr]
    fjExprTypeCast
    <|>[FJExpr]
    fjExprIntLiteral
    <|>[FJExpr]
    fjExprVariable

and fjExprFieldAccessOrMethodInvoke : Parser[FJExpr] =
    (fjExprWithoutFieldAccessOrMethodInvoke <*[FJExpr, Char] (fjSpace *>[Unit, Char] (char '.') <*[Char, Unit] fjSpace))
        >>=[FJExpr, FJExpr] (\(e : FJExpr) ->
            (only[PString] fjIdentifier) >>=[PString, FJExpr] (\(f : PString) ->
                (fjMethodInvokeParamList
                    >>=[PList[FJExpr], FJExpr] (\(p : PList[FJExpr]) -> result[FJExpr] (FJMethodInvoke e (pStringToString f) p)))
                <|>[FJExpr]
                (result[FJExpr] (FJFieldAccess e (pStringToString f)))))

and fjExprSelfMethodInvoke : Parser[FJExpr] =
    (only[PString] fjIdentifier)
        >>=[PString, FJExpr] (\(m : PString) ->
            fjMethodInvokeParamList >>=[PList[FJExpr], FJExpr] (\(params : PList[FJExpr]) ->
                result[FJExpr] (FJSelfMethodInvoke (pStringToString m) params)))

and fjExprAllocate : Parser[FJExpr] =
    (string "new" <*[PString, Unit] fjSpace)
        >>[PString, FJType] fjType
            >>=[FJType, FJExpr] (\(klass : FJType) ->
                fjMethodInvokeParamList >>=[PList[FJExpr], FJExpr] (\(params : PList[FJExpr]) ->
                    result[FJExpr] (FJAllocate klass params)))

and fjMethodInvokeParamList : Parser[PList[FJExpr]] =
    let spaceBetween[T] (p : Parser[T]) : Parser[T] =
        fjSpace *>[Unit, T] p <*[T, Unit] fjSpace;
    between[Char, Char, PList[FJExpr]] (spaceBetween[Char] (char '(')) (spaceBetween[Char] (char ')'))
        (sepby[FJExpr, Char] fjExpr (spaceBetween[Char] (char ',')))

and fjExprTypeCast : Parser[FJExpr] =
    (between[Char, Char, FJType] ((char '(') <*[Char, Unit] fjSpace) (fjSpace *>[Unit, Char] (char ')')) fjType)
        >>=[FJType, FJExpr] (\(klass : FJType) ->
            fjSpace >>[Unit, FJExpr] fjExpr >>=[FJExpr, FJExpr] (\(e : FJExpr) ->
                result[FJExpr] (FJTypeCast klass e)))

and fjExprIntLiteral : Parser[FJExpr] =
    only[PString] (many1[Char] digit)
        <$>[PString, FJExpr] (\(i : PString) -> FJIntLiteral (pStringToString i))

;

let fjAssignWith : Parser[FJExpr] =
    let spaceBetween[T] (p : Parser[T]) : Parser[T] =
        fjSpace *>[Unit, T] p <*[T, Unit] fjSpace;

    spaceBetween[Char] (char '=') >>[Char, FJExpr] fjExpr;

data FJVariableDef = FJVariableDef FJType PList[(FJIdentifier, Maybe[FJExpr])];

let fjVariableDefToString (d : FJVariableDef) : String =
    let defsToString (d : (FJIdentifier, Maybe[FJExpr])) : String =
        "(\{d._1}, \{maybeToString[FJExpr] fjExprToString d._2})";

    case d of
        FJVariableDef c defs -> "FJVariableDef \{fjTypeToString c}, \{pListToString[(FJIdentifier, Maybe[FJExpr])] defsToString defs}";

let fjVariableDefEq (a : FJVariableDef) (b : FJVariableDef) : Bool =
    let varEq (a : (FJIdentifier, Maybe[FJExpr])) (b : (FJIdentifier, Maybe[FJExpr])) : Bool =
        (fjIdentifierEq a._1 b._1) && (maybeEq[FJExpr] fjExprEq a._2 b._2);

    case a of
        FJVariableDef t1 def1 ->
            case b of
                FJVariableDef t2 def2 ->
                    (fjTypeEq t1 t2) && (pListEq[(FJIdentifier, Maybe[FJExpr])] varEq def1 def2);

let fjVariableDef : Parser[FJVariableDef] =
    let spaceBetween[T] (p : Parser[T]) : Parser[T] =
        fjSpace *>[Unit, T] p <*[T, Unit] fjSpace;

    let varBody : Parser[(FJIdentifier, Maybe[FJExpr])] =
        (only[PString] fjIdentifier) >>=[PString, (FJIdentifier, Maybe[FJExpr])] (\(varname : PString) ->
                (fjAssignWith >>=[FJExpr, (FJIdentifier, Maybe[FJExpr])] (\(e : FJExpr) ->
                    result[(FJIdentifier, Maybe[FJExpr])] ((pStringToString varname), (Just[FJExpr] e))))
                <|>[(FJIdentifier, Maybe[FJExpr])]
                (result[(FJIdentifier, Maybe[FJExpr])] ((pStringToString varname), (Nothing[FJExpr]))));

    fjType <*[FJType, Unit] fjSpace1
        >>=[FJType, FJVariableDef] (\(klass : FJType) ->
            ((sepby1[(FJIdentifier, Maybe[FJExpr]), Char] varBody (spaceBetween[Char] (char ',')))
                <*[PList[(FJIdentifier, Maybe[FJExpr])], Char] (fjSpace >>[Unit, Char] (char ';')))
                    >>=[PList[(FJIdentifier, Maybe[FJExpr])], FJVariableDef]
                        (\(defs : PList[(FJIdentifier, Maybe[FJExpr])]) ->
                            result[FJVariableDef] (FJVariableDef klass defs)));

data FJFieldDef = FJFieldDef FJType PList[(FJIdentifier, Maybe[FJExpr])];

let fjFieldDefToString (d : FJFieldDef) : String =
    let defsToString (d : (FJIdentifier, Maybe[FJExpr])) : String =
        "(\{d._1}, \{maybeToString[FJExpr] fjExprToString d._2})";

    case d of
        FJFieldDef c defs -> "FJFieldDef \{fjTypeToString c}, \{pListToString[(FJIdentifier, Maybe[FJExpr])] defsToString defs}";

let fjFieldDefEq (a : FJFieldDef) (b : FJFieldDef) : Bool =
    let varEq (a : (FJIdentifier, Maybe[FJExpr])) (b : (FJIdentifier, Maybe[FJExpr])) : Bool =
        (fjIdentifierEq a._1 b._1) && (maybeEq[FJExpr] fjExprEq a._2 b._2);

    case a of
        FJFieldDef t1 def1 ->
            case b of
                FJFieldDef t2 def2 ->
                    (fjTypeEq t1 t2) && (pListEq[(FJIdentifier, Maybe[FJExpr])] varEq def1 def2);

let fjFieldDef : Parser[FJFieldDef] =
    let spaceBetween[T] (p : Parser[T]) : Parser[T] =
        fjSpace *>[Unit, T] p <*[T, Unit] fjSpace;

    let varBody : Parser[(FJIdentifier, Maybe[FJExpr])] =
        (only[PString] fjIdentifier) >>=[PString, (FJIdentifier, Maybe[FJExpr])] (\(varname : PString) ->
                (fjAssignWith >>=[FJExpr, (FJIdentifier, Maybe[FJExpr])] (\(e : FJExpr) ->
                    result[(FJIdentifier, Maybe[FJExpr])] ((pStringToString varname), (Just[FJExpr] e))))
                <|>[(FJIdentifier, Maybe[FJExpr])]
                (result[(FJIdentifier, Maybe[FJExpr])] ((pStringToString varname), (Nothing[FJExpr]))));

    fjType <*[FJType, Unit] fjSpace1
        >>=[FJType, FJFieldDef] (\(klass : FJType) ->
            ((sepby1[(FJIdentifier, Maybe[FJExpr]), Char] varBody (spaceBetween[Char] (char ',')))
                <*[PList[(FJIdentifier, Maybe[FJExpr])], Char] (fjSpace >>[Unit, Char] (char ';')))
                    >>=[PList[(FJIdentifier, Maybe[FJExpr])], FJFieldDef]
                        (\(defs : PList[(FJIdentifier, Maybe[FJExpr])]) ->
                            result[FJFieldDef] (FJFieldDef klass defs)));

data FJStmt = FJStmtVariableDef FJVariableDef
            | FJStmtExpr FJExpr
            | FJStmtBlock PList[FJStmt]
            | FJStmtReturn FJExpr
            ;

let rec fjStmtToString (stmt : FJStmt) : String =
    case stmt of
        FJStmtVariableDef v         -> "FJStmtVariableDef \{fjVariableDefToString v}"
     |  FJStmtExpr e                -> "FJStmtExpr \{fjExprToString e}"
     |  FJStmtBlock sts             -> "FJStmtBlock \{pListToString[FJStmt] fjStmtToString sts}"
     |  FJStmtReturn ret            -> "FJStmtReturn \{fjExprToString ret}";

let rec fjStmtEq (a : FJStmt) (b : FJStmt) : Bool =
    case a of
        FJStmtVariableDef v1 -> {
            case b of
                FJStmtVariableDef v2 -> fjVariableDefEq v1 v2
             |  _                    -> False
        }
     |  FJStmtExpr e1 -> {
            case b of
                FJStmtExpr e2 -> fjExprEq e1 e2
             |  _             -> False
        }
     |  FJStmtBlock b1 -> {
            case b of
                FJStmtBlock b2 -> pListEq[FJStmt] fjStmtEq b1 b2
             |  _              -> False
        }
     |  FJStmtReturn e1 -> {
            case b of
                FJStmtReturn e2 -> fjExprEq e1 e2
             |  _               -> False
        };

let fjStmtReturn : Parser[FJStmt] =
    ((string "return") >>[PString, Unit] fjSpace1 >>[Unit, FJExpr] fjExpr <*[FJExpr, Char] (fjSpace >>[Unit, Char] (char ';')))
        <$>[FJExpr, FJStmt] (\(e : FJExpr) -> FJStmtReturn e);

let rec fjStmt : Parser[FJStmt] =
    fjStmtReturn
    <|>[FJStmt]
    (fjVariableDef <$>[FJVariableDef, FJStmt] (\(d : FJVariableDef) -> FJStmtVariableDef d))
    <|>[FJStmt]
    ((fjExpr <*[FJExpr, Char] (fjSpace >>[Unit, Char] (char ';'))) <$>[FJExpr, FJStmt] (\(e : FJExpr) -> FJStmtExpr e))
    <|>[FJStmt]
    (fjStmtBlock <$>[PList[FJStmt], FJStmt] (\(stb : PList[FJStmt]) -> FJStmtBlock stb))

and fjStmtBlock : Parser[PList[FJStmt]] =
    ((char '{') <*[Char, Unit] fjSpace)
        *>[Char, PList[FJStmt]] (sepby[FJStmt, Unit] fjStmt fjSpace)
        <*[PList[FJStmt], Char] (fjSpace >>[Unit, Char] (char '}'))
;

--                                       int    a            = 1
data FJMethodParamDef = FJMethodParamDef FJType FJIdentifier Maybe[FJExpr];

let fjMethodParamDefToString (d : FJMethodParamDef) : String =
    case d of
        FJMethodParamDef c f e -> "FJMethodParamDef \{fjTypeToString c}, \{f}, \{maybeToString[FJExpr] fjExprToString e}";

let fjMethodParamDefEq (a : FJMethodParamDef) (b : FJMethodParamDef) : Bool =
    case a of
        FJMethodParamDef t1 id1 e1 ->
            case b of
                FJMethodParamDef t2 id2 e2 ->
                    (fjTypeEq t1 t2) && (fjIdentifierEq id1 id2) && (maybeEq[FJExpr] fjExprEq e1 e2);

let fjMethodParamDef : Parser[FJMethodParamDef] =
    fjType <*[FJType, Unit] fjSpace1
        >>=[FJType, FJMethodParamDef] (\(klass : FJType) ->
            (only[PString] fjIdentifier) >>=[PString, FJMethodParamDef] (\(varname : PString) ->
                (fjAssignWith
                    >>=[FJExpr, FJMethodParamDef] (\(e : FJExpr) -> result[FJMethodParamDef] (FJMethodParamDef klass (pStringToString varname) (Just[FJExpr] e))))
                <|>[FJMethodParamDef]
                (result[FJMethodParamDef] (FJMethodParamDef klass (pStringToString varname) (Nothing[FJExpr])))));

let fjMethodParamDefs : Parser[PList[FJMethodParamDef]] =
    let spaceBetween[T] (p : Parser[T]) : Parser[T] =
        fjSpace *>[Unit, T] p <*[T, Unit] fjSpace;

    sepby[FJMethodParamDef, Char] fjMethodParamDef (spaceBetween[Char] (char ','));

let fjMethodBody : Parser[PList[FJStmt]] =
    fjStmtBlock;

data FJMethod = FJConstructor String PList[FJMethodParamDef] PList[FJStmt]
              | FJNormalMethod String PList[FJMethodParamDef] FJType PList[FJStmt]
              ;

let fjMethodToString (cm : FJMethod) : String =
    case cm of
        FJConstructor name params body -> "FJConstructor \{name}, \{pListToString[FJMethodParamDef] fjMethodParamDefToString params}, \{pListToString[FJStmt] fjStmtToString body}"
     |  FJNormalMethod name params rtype body -> "FJNormalMethod \{name}, \{pListToString[FJMethodParamDef] fjMethodParamDefToString params}, \{fjTypeToString rtype}, \{pListToString[FJStmt] fjStmtToString body}"
     ;
let fjMethodEq (a : FJMethod) (b : FJMethod) : Bool =
    case a of
        FJConstructor n1 p1 s1 -> {
            case b of
                FJConstructor n2 p2 s2 -> (n1 == n2)
                    && (pListEq[FJMethodParamDef] fjMethodParamDefEq p1 p2)
                    && (pListEq[FJStmt] fjStmtEq s1 s2)
             |  _ -> False
        }
     |  FJNormalMethod n1 p1 t1 s1 -> {
            case b of
                FJNormalMethod n2 p2 t2 s2 ->
                    (n1 == n2)
                        && (pListEq[FJMethodParamDef] fjMethodParamDefEq p1 p2)
                        && (fjTypeEq t1 t2)
                        && (pListEq[FJStmt] fjStmtEq s1 s2)
             |  _ -> False
        };

type FJMethodWithoutRtype = (String, PList[FJMethodParamDef], PList[FJStmt]);
let fjMethodWithoutRtype : Parser[FJMethodWithoutRtype] =
    let spaceBetween[T] (p : Parser[T]) : Parser[T] =
        fjSpace *>[Unit, T] p <*[T, Unit] fjSpace;

    (fjIdentifier <*[PString, Unit] fjSpace)
        >>=[PString, FJMethodWithoutRtype] (\(id : PString) ->
            (between[Char, Char, PList[FJMethodParamDef]] (spaceBetween[Char] (char '(')) (spaceBetween[Char] (char ')'))
                fjMethodParamDefs)
                    >>=[PList[FJMethodParamDef], FJMethodWithoutRtype] (\(params : PList[FJMethodParamDef]) ->
                        fjMethodBody >>=[PList[FJStmt], FJMethodWithoutRtype] (\(body : PList[FJStmt]) ->
                            result[FJMethodWithoutRtype] (pStringToString id, params, body))));

let fjMethod : Parser[FJMethod] =
    ((fjType <*[FJType, Unit] fjSpace1) >>=[FJType, FJMethod] (\(rtype : FJType) ->
        fjMethodWithoutRtype >>=[FJMethodWithoutRtype, FJMethod] (\(body : FJMethodWithoutRtype) ->
            result[FJMethod] (FJNormalMethod body._1 body._2 rtype body._3))))
    <|>[FJMethod]
    (fjMethodWithoutRtype >>=[FJMethodWithoutRtype, FJMethod] (\(body : FJMethodWithoutRtype) ->
        result[FJMethod] (FJConstructor body._1 body._2 body._3)));

data rec FJClassBodyContent = FJClassMethod FJMethod
                            | FJClassField FJFieldDef
                            | FJInnerClass FJClass
and FJClass = FJClass FJType Maybe[FJType] PList[FJClassBodyContent];

let rec fjClassBodyContentToString (c : FJClassBodyContent) : String =
    case c of
        FJClassMethod m         -> "FJClassMethod \{fjMethodToString m}"
     |  FJClassField f          -> "FJClassField \{fjFieldDefToString f}"
     |  FJInnerClass c          -> "FJInnerClass \{fjClassToString c}"
and fjClassToString (c : FJClass) : String =
    case c of
        FJClass name ext body -> "FJClass \{fjTypeToString name}, \{maybeToString[FJType] fjTypeToString ext}, \{pListToString[FJClassBodyContent] fjClassBodyContentToString body}";

let rec fjClassBodyContentEq (a : FJClassBodyContent) (b : FJClassBodyContent) : Bool =
    case a of
        FJClassMethod m1 -> {
            case b of
                FJClassMethod m2 -> fjMethodEq m1 m2
             |  _                -> False
        }
     |  FJClassField f1 -> {
            case b of
                FJClassField f2 -> fjFieldDefEq f1 f2
             |  _               -> False
        }
     |  FJInnerClass c1 -> {
            case b of
                FJInnerClass c2 -> fjClassEq c1 c2
             |  _               -> False
        }
and fjClassEq (a : FJClass) (b : FJClass) : Bool =
    case a of
        FJClass t1 ext1 b1 ->
            case b of
                FJClass t2 ext2 b2 ->
                    (fjTypeEq t1 t2)
                        && (maybeEq[FJType] fjTypeEq ext1 ext2)
                        && (pListEq[FJClassBodyContent] fjClassBodyContentEq b1 b2);

let rec fjClassBodyContents : Parser[PList[FJClassBodyContent]] =
    let inner : Parser[FJClassBodyContent] =
        (fjMethod <$>[FJMethod, FJClassBodyContent] (\(m : FJMethod) -> FJClassMethod m))
        <|>[FJClassBodyContent]
        (fjFieldDef <$>[FJFieldDef, FJClassBodyContent] (\(f : FJFieldDef) -> FJClassField f))
        <|>[FJClassBodyContent]
        (fjClass <$>[FJClass, FJClassBodyContent] (\(c : FJClass) -> FJInnerClass c));

    ((char '{') <*[Char, Unit] fjSpace)
        *>[Char, PList[FJClassBodyContent]] (sepby[FJClassBodyContent, Unit] inner fjSpace)
        <*[PList[FJClassBodyContent], Char] (fjSpace >>[Unit, Char] (char '}'))

and fjClass : Parser[FJClass] =
    ((string "class") >>[PString, Unit] fjSpace1 >>[Unit, FJType] fjType <*[FJType, Unit] fjSpace1)
        >>=[FJType, FJClass] (\(name : FJType) ->
            ((((string "extends") >>[PString, Unit] fjSpace1 >>[Unit, FJType] fjType <*[FJType, Unit] fjSpace1)
                <$>[FJType, Maybe[FJType]] (\(t : FJType) -> Just[FJType] t))
             <|>[Maybe[FJType]]
             (result[Maybe[FJType]] (Nothing[FJType])))

            >>=[Maybe[FJType], FJClass] (\(ext : Maybe[FJType]) ->
                fjSpace >>[Unit, PList[FJClassBodyContent]] fjClassBodyContents
                    >>=[PList[FJClassBodyContent], FJClass] (\(body : PList[FJClassBodyContent]) ->
                        result[FJClass] (FJClass name ext body))));

let fjParse : Parser[PList[FJClass]] =
    fjSpace >>[Unit, PList[FJClass]] sepby[FJClass, Unit] fjClass fjSpace;
