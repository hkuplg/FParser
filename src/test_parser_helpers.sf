{-# INCLUDE "eq.sf" #-}
{-# INCLUDE "show.sf" #-}
{-# INCLUDE "plist.sf" #-}
{-# INCLUDE "maybe.sf" #-}
{-# INCLUDE "parser.sf" #-}
{-# INCLUDE "testfx.sf" #-}

let firstParseOutputEq[A] (eq : Eq[A]) (r : ParseOutput[A]) (expected : ParseContext[A]) : Bool =
    case first[ParseContext[A]] r of
        Nothing         -> False
     |  Just x          -> parseContextEq[A] eq x expected;

let assertFirstParseOutputEq[A] (eq : Eq[A]) (show : Show[A]) (src : ParseOutput[A]) (expected : ParseContext[A]) : Bool =
    if firstParseOutputEq[A] eq src expected then
        True
    else {
        -- error[Unit] "Assert failed!\n\tExpecting the 1st result: \{parseContextToString[A] show expected}"
        --             .concat("\n\tBut found output        : \{parseOutputToString[A] show src}");
        printErrLn "Assert failed!\n\tExpecting the 1st result: \{parseContextToString[A] show expected}"
                   .concat("\n\tBut found output        : \{parseOutputToString[A] show src}");
        False
    };

let firstParseResultEq[A] (eq : Eq[A]) (r : ParseOutput[A]) (expected : A) : Bool =
    case first[ParseContext[A]] r of
        Nothing         -> False
     |  Just x          -> eq x._1 expected;

let assertFirstParseResultEq[A] (eq : Eq[A]) (show : Show[A]) (src : ParseOutput[A]) (expected : A) = {
    println "Asserting\n\tExpecting the 1st result: \{show expected}"
            .concat("\n\tOutput                  : \{parseOutputToString[A] show src}");

    if firstParseResultEq[A] eq src expected then
        True
    else {
        -- error[Unit] "Assert failed!\n\tExpecting the 1st result: \{show expected}"
        --             .concat("\n\tBut found output        : \{parseOutputToString[A] show src}")
        printErrLn "Assert failed!\n\tExpecting the 1st result: \{show expected}"
                   .concat("\n\tBut found output        : \{parseOutputToString[A] show src}");
        False
    }
};

let assertParseStringResult[A] (eq : Eq[A]) (show : Show[A]) (expected : A) (p : Parser[A]) (s : String) = {
    println "=== Parsing \{s}";

    let output = p `parseString[A]` s;
    assertFirstParseResultEq[A] eq show output expected
};
